"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("path"),t=require("os"),r=require("fs/promises");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=a(e),n=a(t),i=a(r);exports.PathUtils=class{static normalizePath(e){if(!e)return e;let t=s.default.normalize(e).replace(/\\/g,s.default.sep).replace(/\/$/g,"");if("win32"===process.platform&&!t.startsWith("\\\\?\\")){const e=t.startsWith("\\\\");t.length>260&&!e?t=`\\\\?\\${t}`:e&&t.length>255&&(t=`\\\\?\\UNC\\${t.slice(2)}`)}return t}static ensureValidPath(e,t={}){if(!e)throw new Error("Path cannot be empty");const r=s.default.normalize(e);if("win32"===process.platform){const e=s.default.basename(r),a=(t.isUrl,/[<>"|?*]/g),n=e.match(a);if(n){const t=[...new Set(n)].join(", ");throw new Error(`Filename contains illegal characters (${t}): ${e}`)}!t.isUrl&&r.length>1&&!/^[A-Za-z]:\\/.test(r)&&console.warn("Path does not follow Windows drive letter pattern:",r)}else if(/\0/.test(r))throw new Error("Path contains null characters");if(t.isUrl){const t=new RegExp(`[^a-zA-Z0-9${"-._".replace(/./g,"\\$&")}]`,"g"),r=e.match(t);r&&console.warn(`Warning: URL-based path contains potentially problematic characters: ${r.join(", ")}`)}if("win32"===process.platform){const t=s.default.resolve(e),r=32767;if(t.length>r)throw new Error(`Path exceeds maximum length supported by Windows (${t.length} > ${r}): ${e}`)}return!0}static sanitizeFileName(e,t={}){if(!e)return e;const r="win32"===process.platform?/[<>:"/\\|?*]/g:/[/]/g;return e.replace(r,"-").replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-+|-+$/g,"").trim()}static resolveHomePath(e){return e?e.startsWith("~")?s.default.join(n.default.homedir(),e.slice(1)):e.replace(/\$HOME/g,n.default.homedir()):e}static getAbsolutePath(e){const t=s.default.resolve(e);return this.normalizePath(t)}static async isAccessible(e){try{return await i.default.access(e),!0}catch{return!1}}};
