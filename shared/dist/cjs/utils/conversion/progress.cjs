"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class t{constructor(t,s=250){this.onProgress=t,this.updateInterval=s,this.lastUpdate=0,this.currentProgress=0,this.sections=[],this.currentSection=null}update(t){const s=Date.now();(100===(t=Math.max(0,Math.min(100,t)))||0===t||s-this.lastUpdate>=this.updateInterval)&&(this.currentProgress=t,this.lastUpdate=s,this.onProgress&&this.onProgress({progress:t,sections:this.sections,currentSection:this.currentSection}))}updateScaled(t,s,e,r){if(r<=0)return;const i=s+t/r*(e-s);this.update(i)}startSection(t,s=1){this.sections.push({name:t,weight:s,progress:0,completed:!1}),this.currentSection=t,this.updateSectionProgress()}completeSection(){const t=this.sections.find((t=>t.name===this.currentSection));t&&(t.completed=!0,t.progress=100,this.updateSectionProgress())}updateSectionProgress(t=null){const s=this.sections.find((t=>t.name===this.currentSection));s&&null!==t&&(s.progress=Math.max(0,Math.min(100,t)));const e=this.sections.reduce(((t,s)=>t+s.weight),0),r=this.sections.reduce(((t,s)=>t+s.progress/100*s.weight),0),i=e>0?r/e*100:this.currentProgress;this.update(i)}getState(){return{progress:this.currentProgress,sections:this.sections,currentSection:this.currentSection}}reset(){this.currentProgress=0,this.sections=[],this.currentSection=null,this.update(0)}}var s={ProgressTracker:t};exports.ProgressTracker=t,exports.default=s;
