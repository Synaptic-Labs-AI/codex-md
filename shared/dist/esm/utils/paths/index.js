import e from"path";import t from"os";import r from"fs/promises";class s{static normalizePath(t){if(!t)return t;let r=e.normalize(t).replace(/\\/g,e.sep).replace(/\/$/g,"");if("win32"===process.platform&&!r.startsWith("\\\\?\\")){const e=r.startsWith("\\\\");r.length>260&&!e?r=`\\\\?\\${r}`:e&&r.length>255&&(r=`\\\\?\\UNC\\${r.slice(2)}`)}return r}static ensureValidPath(t,r={}){if(!t)throw new Error("Path cannot be empty");const s=e.normalize(t);if("win32"===process.platform){const t=e.basename(s),a=(r.isUrl,/[<>"|?*]/g),n=t.match(a);if(n){const e=[...new Set(n)].join(", ");throw new Error(`Filename contains illegal characters (${e}): ${t}`)}!r.isUrl&&s.length>1&&!/^[A-Za-z]:\\/.test(s)&&console.warn("Path does not follow Windows drive letter pattern:",s)}else if(/\0/.test(s))throw new Error("Path contains null characters");if(r.isUrl){const e=new RegExp(`[^a-zA-Z0-9${"-._".replace(/./g,"\\$&")}]`,"g"),r=t.match(e);r&&console.warn(`Warning: URL-based path contains potentially problematic characters: ${r.join(", ")}`)}if("win32"===process.platform){const r=e.resolve(t),s=32767;if(r.length>s)throw new Error(`Path exceeds maximum length supported by Windows (${r.length} > ${s}): ${t}`)}return!0}static sanitizeFileName(e,t={}){if(!e)return e;const r="win32"===process.platform?/[<>:"/\\|?*]/g:/[/]/g;return e.replace(r,"-").replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-+|-+$/g,"").trim()}static resolveHomePath(r){return r?r.startsWith("~")?e.join(t.homedir(),r.slice(1)):r.replace(/\$HOME/g,t.homedir()):r}static getAbsolutePath(t){const r=e.resolve(t);return this.normalizePath(r)}static async isAccessible(e){try{return await r.access(e),!0}catch{return!1}}}export{s as PathUtils};
