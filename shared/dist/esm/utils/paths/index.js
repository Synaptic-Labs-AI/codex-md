import t from"path";import e from"os";class r{static normalizePath(e){if(!e)return e;let r=t.normalize(e).replace(/\\/g,t.sep).replace(/\/$/g,"");if("win32"===process.platform&&!r.startsWith("\\\\?\\")){const t=r.startsWith("\\\\");r.length>260&&!t?r=`\\\\?\\${r}`:t&&r.length>255&&(r=`\\\\?\\UNC\\${r.slice(2)}`)}return r}static ensureValidPath(e){if(!e)throw new Error("Path cannot be empty");if(("win32"===process.platform?/[<>:"|?*]/g:/\0/g).test(e))throw new Error(`Path contains illegal characters: ${e}`);if("win32"===process.platform){if(t.resolve(e).length>32767)throw new Error("Path exceeds maximum length supported by Windows")}return!0}static resolvePath(e,...r){const s=t.join(e,...r);return this.normalizePath(t.resolve(s))}static toPlatformPath(e){return e.split(/[/\\]/).join(t.sep)}static resolveHomePath(r){return r?r.startsWith("~")?t.join(e.homedir(),r.slice(1)):r.replace(/\$HOME/g,e.homedir()):r}static getAbsolutePath(e){const r=t.resolve(e);return this.normalizePath(r)}static sanitizeFileName(t){if(!t)return t;const e="win32"===process.platform?/[<>:"/\\|?*\x00-\x1F]/g:/[/\x00-\x1F]/g;return t.replace(e,"-").replace(/\s+/g,"-").replace(/-+/g,"-").trim()}static async isAccessible(t){try{return await fs.access(t),!0}catch{return!1}}}export{r as PathUtils};
