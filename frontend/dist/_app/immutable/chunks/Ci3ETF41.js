const l={documents:["pdf","docx","pptx","rtf","txt","md"],audio:["mp3","wav","ogg","m4a","aac","wma"],video:["mp4","mov","avi","mkv","webm"],data:["csv","xlsx","xls","json","yaml"],web:["url","parenturl"]},o={BINARY:"binary",TEXT:"text",URL:"url"},s={docx:{handling:o.BINARY,converter:"text",requiresOcr:!1},pptx:{handling:o.BINARY,converter:"text",requiresOcr:!1},pdf:{handling:o.BINARY,converter:"pdf",requiresOcr:!0},xlsx:{handling:o.BINARY,converter:"data",requiresOcr:!1},csv:{handling:o.TEXT,converter:"data",requiresOcr:!1},mp3:{handling:o.BINARY,converter:"audio",requiresOcr:!1},wav:{handling:o.BINARY,converter:"audio",requiresOcr:!1},mp4:{handling:o.BINARY,converter:"video",requiresOcr:!1}},w=["mp3","wav","ogg","m4a","mpga","mp4","webm","avi","mov","mpeg"];function c(n){const e=typeof n=="string"?n:n.name||n.originalFileName||"unknown",t=e.split(".").pop().toLowerCase();if(typeof n=="object"&&n.type&&["url","parenturl"].includes(n.type))return{fileName:e,fileType:n.type,category:"web",handling:o.URL,converter:n.type,requiresOcr:!1,isWeb:!0,isBinary:!1};let a="unknown";for(const[i,y]of Object.entries(l))if(y.includes(t)){a=i;break}const r=s[t]||{handling:o.TEXT,converter:"text",requiresOcr:!1};return{fileName:e,fileType:t,category:a,...r,isWeb:a==="web",isBinary:r.handling===o.BINARY,requiresApiKey:w.includes(t)}}async function f(n){return c(n).isBinary?await n.arrayBuffer():await n.text()}function d(n){return c(n).category}function u(n){return c(n).requiresApiKey}const g={FILE_CATEGORIES:l,HANDLING_TYPES:o,CONVERTER_CONFIG:s,API_REQUIRED_TYPES:w,getFileHandlingInfo:c,getFileContent:f,getFileType:d,requiresApiKey:u},p=Object.freeze(Object.defineProperty({__proto__:null,API_REQUIRED_TYPES:w,CONVERTER_CONFIG:s,FILE_CATEGORIES:l,HANDLING_TYPES:o,default:g,getFileContent:f,getFileHandlingInfo:c,getFileType:d,requiresApiKey:u},Symbol.toStringTag,{value:"Module"}));class v{async convertFile(e,t,a){if(!window.electron)throw new Error("Electron API not available");a&&window.electron.onConversionProgress(r=>{a(r)});try{const r=c({name:t.originalFileName,type:t.type,path:typeof e=="string"?e:void 0});console.log("üîç File handling info:",r);const i={...t,isBinary:r.isBinary};return r.isWeb||(i.type=r.converter),e instanceof ArrayBuffer&&t.isTemporary?(console.log(`Converting binary file as ${r.converter}: ${r.fileName}`),i.buffer=e):typeof e=="string"&&r.isWeb?(console.log(`Converting URL: ${e} with type: ${t.type} (${r.isWeb?"web":"non-web"})`),i.content=e):typeof e=="string"&&t.originalFileName&&(console.log(`Converting text content from: ${r.fileName}`),i.content=e),console.log("üöÄ Sending conversion request with options:",{type:i.type,isWeb:r.isWeb,originalType:t.type,finalType:i.type}),await window.electron.convert(e,i)}catch(r){throw console.error("Conversion error:",r),r}}async selectOutputDirectory(){if(!window.electron)throw new Error("Electron API not available");return await window.electron.selectDirectory()}async cancelRequests(){if(!window.electron)throw new Error("Electron API not available");await window.electron.cancelRequests()}async getOfflineStatus(){if(!window.electron)throw new Error("Electron API not available");return await window.electron.getOfflineStatus()}async getQueuedOperations(){if(!window.electron)throw new Error("Electron API not available");return await window.electron.getQueuedOperations()}async clearCache(){if(!window.electron)throw new Error("Electron API not available");return await window.electron.clearCache()}onOfflineEvent(e){if(!window.electron)throw new Error("Electron API not available");return window.electron.onOfflineEvent(e)}async getSetting(e){if(!window.electron)throw new Error("Electron API not available");return await window.electron.getSetting(e)}async setSetting(e,t){if(!window.electron)throw new Error("Electron API not available");return await window.electron.setSetting(e,t)}}const E=new v;export{l as F,E as e,p as t};
