"use strict";

/**
 * Conversion Utilities
 * Centralizes conversion-related functionality for the electron process
 * 
 * This module provides utilities for file conversion operations, including
 * progress tracking, converter registration, and conversion helpers.
 * 
 * Used by:
 * - src/electron/services/ElectronConversionService.js
 * - src/electron/converters/UnifiedConverterFactory.js
 */

const {
  ProgressTracker
} = require('./progress');
const ConversionStatus = require('./ConversionStatus');

// Registry to store converter factories
const converterFactories = new Map();

/**
 * Register a converter factory for a specific type
 * @param {string} name - Name of the converter factory
 * @param {Object} factory - Converter factory instance
 */
function registerConverterFactory(name, factory) {
  converterFactories.set(name, factory);
}

/**
 * Register a converter implementation
 * @param {string} type - File type to handle
 * @param {Object} converter - Converter implementation
 */
function registerConverter(type, converter) {
  const factory = converterFactories.get('converterRegistry');
  if (factory && typeof factory.registerConverter === 'function') {
    factory.registerConverter(type, converter);
  } else {
    console.warn(`No converter registry available to register converter for ${type}`);
  }
}

/**
 * Convert content to markdown using the appropriate converter
 * @param {string} type - File type
 * @param {Buffer|string} content - Content to convert
 * @param {Object} options - Conversion options
 * @returns {Promise<Object>} Conversion result
 */
async function convertToMarkdown(type, content, options = {}) {
  const factory = converterFactories.get('converterRegistry');
  if (!factory) {
    throw new Error('No converter registry available');
  }
  return await factory.convertToMarkdown(type, content, options);
}
module.exports = {
  ProgressTracker,
  ConversionStatus,
  registerConverterFactory,
  registerConverter,
  convertToMarkdown
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9ncmVzc1RyYWNrZXIiLCJyZXF1aXJlIiwiQ29udmVyc2lvblN0YXR1cyIsImNvbnZlcnRlckZhY3RvcmllcyIsIk1hcCIsInJlZ2lzdGVyQ29udmVydGVyRmFjdG9yeSIsIm5hbWUiLCJmYWN0b3J5Iiwic2V0IiwicmVnaXN0ZXJDb252ZXJ0ZXIiLCJ0eXBlIiwiY29udmVydGVyIiwiZ2V0IiwiY29uc29sZSIsIndhcm4iLCJjb252ZXJ0VG9NYXJrZG93biIsImNvbnRlbnQiLCJvcHRpb25zIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2VsZWN0cm9uL3V0aWxzL2NvbnZlcnNpb24vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbnZlcnNpb24gVXRpbGl0aWVzXHJcbiAqIENlbnRyYWxpemVzIGNvbnZlcnNpb24tcmVsYXRlZCBmdW5jdGlvbmFsaXR5IGZvciB0aGUgZWxlY3Ryb24gcHJvY2Vzc1xyXG4gKiBcclxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgdXRpbGl0aWVzIGZvciBmaWxlIGNvbnZlcnNpb24gb3BlcmF0aW9ucywgaW5jbHVkaW5nXHJcbiAqIHByb2dyZXNzIHRyYWNraW5nLCBjb252ZXJ0ZXIgcmVnaXN0cmF0aW9uLCBhbmQgY29udmVyc2lvbiBoZWxwZXJzLlxyXG4gKiBcclxuICogVXNlZCBieTpcclxuICogLSBzcmMvZWxlY3Ryb24vc2VydmljZXMvRWxlY3Ryb25Db252ZXJzaW9uU2VydmljZS5qc1xyXG4gKiAtIHNyYy9lbGVjdHJvbi9jb252ZXJ0ZXJzL1VuaWZpZWRDb252ZXJ0ZXJGYWN0b3J5LmpzXHJcbiAqL1xyXG5cclxuY29uc3QgeyBQcm9ncmVzc1RyYWNrZXIgfSA9IHJlcXVpcmUoJy4vcHJvZ3Jlc3MnKTtcclxuY29uc3QgQ29udmVyc2lvblN0YXR1cyA9IHJlcXVpcmUoJy4vQ29udmVyc2lvblN0YXR1cycpO1xyXG5cclxuLy8gUmVnaXN0cnkgdG8gc3RvcmUgY29udmVydGVyIGZhY3Rvcmllc1xyXG5jb25zdCBjb252ZXJ0ZXJGYWN0b3JpZXMgPSBuZXcgTWFwKCk7XHJcblxyXG4vKipcclxuICogUmVnaXN0ZXIgYSBjb252ZXJ0ZXIgZmFjdG9yeSBmb3IgYSBzcGVjaWZpYyB0eXBlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgY29udmVydGVyIGZhY3RvcnlcclxuICogQHBhcmFtIHtPYmplY3R9IGZhY3RvcnkgLSBDb252ZXJ0ZXIgZmFjdG9yeSBpbnN0YW5jZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJDb252ZXJ0ZXJGYWN0b3J5KG5hbWUsIGZhY3RvcnkpIHtcclxuICAgIGNvbnZlcnRlckZhY3Rvcmllcy5zZXQobmFtZSwgZmFjdG9yeSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlciBhIGNvbnZlcnRlciBpbXBsZW1lbnRhdGlvblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIEZpbGUgdHlwZSB0byBoYW5kbGVcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbnZlcnRlciAtIENvbnZlcnRlciBpbXBsZW1lbnRhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJDb252ZXJ0ZXIodHlwZSwgY29udmVydGVyKSB7XHJcbiAgICBjb25zdCBmYWN0b3J5ID0gY29udmVydGVyRmFjdG9yaWVzLmdldCgnY29udmVydGVyUmVnaXN0cnknKTtcclxuICAgIGlmIChmYWN0b3J5ICYmIHR5cGVvZiBmYWN0b3J5LnJlZ2lzdGVyQ29udmVydGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgZmFjdG9yeS5yZWdpc3RlckNvbnZlcnRlcih0eXBlLCBjb252ZXJ0ZXIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oYE5vIGNvbnZlcnRlciByZWdpc3RyeSBhdmFpbGFibGUgdG8gcmVnaXN0ZXIgY29udmVydGVyIGZvciAke3R5cGV9YCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IGNvbnRlbnQgdG8gbWFya2Rvd24gdXNpbmcgdGhlIGFwcHJvcHJpYXRlIGNvbnZlcnRlclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIEZpbGUgdHlwZVxyXG4gKiBAcGFyYW0ge0J1ZmZlcnxzdHJpbmd9IGNvbnRlbnQgLSBDb250ZW50IHRvIGNvbnZlcnRcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBDb252ZXJzaW9uIG9wdGlvbnNcclxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQ29udmVyc2lvbiByZXN1bHRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRUb01hcmtkb3duKHR5cGUsIGNvbnRlbnQsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgY29uc3QgZmFjdG9yeSA9IGNvbnZlcnRlckZhY3Rvcmllcy5nZXQoJ2NvbnZlcnRlclJlZ2lzdHJ5Jyk7XHJcbiAgICBpZiAoIWZhY3RvcnkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvbnZlcnRlciByZWdpc3RyeSBhdmFpbGFibGUnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXdhaXQgZmFjdG9yeS5jb252ZXJ0VG9NYXJrZG93bih0eXBlLCBjb250ZW50LCBvcHRpb25zKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBQcm9ncmVzc1RyYWNrZXIsXHJcbiAgICBDb252ZXJzaW9uU3RhdHVzLFxyXG4gICAgcmVnaXN0ZXJDb252ZXJ0ZXJGYWN0b3J5LFxyXG4gICAgcmVnaXN0ZXJDb252ZXJ0ZXIsXHJcbiAgICBjb252ZXJ0VG9NYXJrZG93blxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0VBQUVBO0FBQWdCLENBQUMsR0FBR0MsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNqRCxNQUFNQyxnQkFBZ0IsR0FBR0QsT0FBTyxDQUFDLG9CQUFvQixDQUFDOztBQUV0RDtBQUNBLE1BQU1FLGtCQUFrQixHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Msd0JBQXdCQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtFQUM3Q0osa0JBQWtCLENBQUNLLEdBQUcsQ0FBQ0YsSUFBSSxFQUFFQyxPQUFPLENBQUM7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLGlCQUFpQkEsQ0FBQ0MsSUFBSSxFQUFFQyxTQUFTLEVBQUU7RUFDeEMsTUFBTUosT0FBTyxHQUFHSixrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDLG1CQUFtQixDQUFDO0VBQzNELElBQUlMLE9BQU8sSUFBSSxPQUFPQSxPQUFPLENBQUNFLGlCQUFpQixLQUFLLFVBQVUsRUFBRTtJQUM1REYsT0FBTyxDQUFDRSxpQkFBaUIsQ0FBQ0MsSUFBSSxFQUFFQyxTQUFTLENBQUM7RUFDOUMsQ0FBQyxNQUFNO0lBQ0hFLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLDZEQUE2REosSUFBSSxFQUFFLENBQUM7RUFDckY7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWVLLGlCQUFpQkEsQ0FBQ0wsSUFBSSxFQUFFTSxPQUFPLEVBQUVDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRTtFQUMxRCxNQUFNVixPQUFPLEdBQUdKLGtCQUFrQixDQUFDUyxHQUFHLENBQUMsbUJBQW1CLENBQUM7RUFDM0QsSUFBSSxDQUFDTCxPQUFPLEVBQUU7SUFDVixNQUFNLElBQUlXLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQztFQUN0RDtFQUVBLE9BQU8sTUFBTVgsT0FBTyxDQUFDUSxpQkFBaUIsQ0FBQ0wsSUFBSSxFQUFFTSxPQUFPLEVBQUVDLE9BQU8sQ0FBQztBQUNsRTtBQUVBRSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNicEIsZUFBZTtFQUNmRSxnQkFBZ0I7RUFDaEJHLHdCQUF3QjtFQUN4QkksaUJBQWlCO0VBQ2pCTTtBQUNKLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=