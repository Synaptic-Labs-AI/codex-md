"use strict";

/**
 * File Name Utilities
 * Provides functions for handling file names and URLs
 * 
 * This module contains utilities for cleaning filenames, generating
 * URL-based filenames, and handling temporary files.
 * 
 * Used by:
 * - src/electron/services/ConversionResultManager.js
 * - src/electron/services/FileSystemService.js
 */

const path = require('path');
const {
  URL
} = require('url');

/**
 * Clean a filename to be safe for temporary storage
 * @param {string} filename - The filename to clean
 * @returns {string} The cleaned filename
 */
function cleanTemporaryFilename(filename) {
  if (!filename) return 'unknown';
  return filename.replace(/[<>:"/\\|?*]+/g, '_') // Replace invalid characters
  .replace(/\s+/g, '_') // Replace spaces with underscores
  .replace(/__+/g, '_') // Replace multiple underscores with single
  .replace(/^_+|_+$/g, ''); // Trim underscores from start and end
}

/**
 * Get the basename of a file path without extension
 * @param {string} filePath - The file path
 * @returns {string} The basename without extension
 */
function getBasename(filePath) {
  const basename = path.basename(filePath);
  const lastDot = basename.lastIndexOf('.');
  return lastDot === -1 ? basename : basename.slice(0, lastDot);
}

/**
 * Generate a filename from a URL
 * @param {string} url - The URL to convert to a filename
 * @returns {string} The generated filename
 */
function generateUrlFilename(url) {
  try {
    const parsedUrl = new URL(url);
    let filename = parsedUrl.hostname;

    // Add path (excluding query and hash)
    if (parsedUrl.pathname !== '/') {
      filename += parsedUrl.pathname;
    }

    // Clean and return
    return cleanTemporaryFilename(filename);
  } catch (error) {
    console.warn('Invalid URL provided to generateUrlFilename:', url);
    // Fall back to cleaning the URL as a string
    return cleanTemporaryFilename(url);
  }
}

/**
 * Sanitize a filename for safe saving
 * @param {string} filename - The filename to sanitize
 * @returns {string} The sanitized filename
 */
function sanitizeFilename(filename) {
  return cleanTemporaryFilename(filename);
}
module.exports = {
  cleanTemporaryFilename,
  getBasename,
  generateUrlFilename,
  sanitizeFilename
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIlVSTCIsImNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUiLCJmaWxlbmFtZSIsInJlcGxhY2UiLCJnZXRCYXNlbmFtZSIsImZpbGVQYXRoIiwiYmFzZW5hbWUiLCJsYXN0RG90IiwibGFzdEluZGV4T2YiLCJzbGljZSIsImdlbmVyYXRlVXJsRmlsZW5hbWUiLCJ1cmwiLCJwYXJzZWRVcmwiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsInNhbml0aXplRmlsZW5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2VsZWN0cm9uL3V0aWxzL2ZpbGVzL25hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGaWxlIE5hbWUgVXRpbGl0aWVzXHJcbiAqIFByb3ZpZGVzIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgZmlsZSBuYW1lcyBhbmQgVVJMc1xyXG4gKiBcclxuICogVGhpcyBtb2R1bGUgY29udGFpbnMgdXRpbGl0aWVzIGZvciBjbGVhbmluZyBmaWxlbmFtZXMsIGdlbmVyYXRpbmdcclxuICogVVJMLWJhc2VkIGZpbGVuYW1lcywgYW5kIGhhbmRsaW5nIHRlbXBvcmFyeSBmaWxlcy5cclxuICogXHJcbiAqIFVzZWQgYnk6XHJcbiAqIC0gc3JjL2VsZWN0cm9uL3NlcnZpY2VzL0NvbnZlcnNpb25SZXN1bHRNYW5hZ2VyLmpzXHJcbiAqIC0gc3JjL2VsZWN0cm9uL3NlcnZpY2VzL0ZpbGVTeXN0ZW1TZXJ2aWNlLmpzXHJcbiAqL1xyXG5cclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuY29uc3QgeyBVUkwgfSA9IHJlcXVpcmUoJ3VybCcpO1xyXG5cclxuLyoqXHJcbiAqIENsZWFuIGEgZmlsZW5hbWUgdG8gYmUgc2FmZSBmb3IgdGVtcG9yYXJ5IHN0b3JhZ2VcclxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIC0gVGhlIGZpbGVuYW1lIHRvIGNsZWFuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjbGVhbmVkIGZpbGVuYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBjbGVhblRlbXBvcmFyeUZpbGVuYW1lKGZpbGVuYW1lKSB7XHJcbiAgICBpZiAoIWZpbGVuYW1lKSByZXR1cm4gJ3Vua25vd24nO1xyXG5cclxuICAgIHJldHVybiBmaWxlbmFtZVxyXG4gICAgICAgIC5yZXBsYWNlKC9bPD46XCIvXFxcXHw/Kl0rL2csICdfJykgLy8gUmVwbGFjZSBpbnZhbGlkIGNoYXJhY3RlcnNcclxuICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCAnXycpIC8vIFJlcGxhY2Ugc3BhY2VzIHdpdGggdW5kZXJzY29yZXNcclxuICAgICAgICAucmVwbGFjZSgvX18rL2csICdfJykgLy8gUmVwbGFjZSBtdWx0aXBsZSB1bmRlcnNjb3JlcyB3aXRoIHNpbmdsZVxyXG4gICAgICAgIC5yZXBsYWNlKC9eXyt8XyskL2csICcnKTsgLy8gVHJpbSB1bmRlcnNjb3JlcyBmcm9tIHN0YXJ0IGFuZCBlbmRcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgYmFzZW5hbWUgb2YgYSBmaWxlIHBhdGggd2l0aG91dCBleHRlbnNpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoIC0gVGhlIGZpbGUgcGF0aFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYmFzZW5hbWUgd2l0aG91dCBleHRlbnNpb25cclxuICovXHJcbmZ1bmN0aW9uIGdldEJhc2VuYW1lKGZpbGVQYXRoKSB7XHJcbiAgICBjb25zdCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZVBhdGgpO1xyXG4gICAgY29uc3QgbGFzdERvdCA9IGJhc2VuYW1lLmxhc3RJbmRleE9mKCcuJyk7XHJcbiAgICByZXR1cm4gbGFzdERvdCA9PT0gLTEgPyBiYXNlbmFtZSA6IGJhc2VuYW1lLnNsaWNlKDAsIGxhc3REb3QpO1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGUgYSBmaWxlbmFtZSBmcm9tIGEgVVJMXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIGNvbnZlcnQgdG8gYSBmaWxlbmFtZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIGZpbGVuYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZVVybEZpbGVuYW1lKHVybCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XHJcbiAgICAgICAgbGV0IGZpbGVuYW1lID0gcGFyc2VkVXJsLmhvc3RuYW1lO1xyXG5cclxuICAgICAgICAvLyBBZGQgcGF0aCAoZXhjbHVkaW5nIHF1ZXJ5IGFuZCBoYXNoKVxyXG4gICAgICAgIGlmIChwYXJzZWRVcmwucGF0aG5hbWUgIT09ICcvJykge1xyXG4gICAgICAgICAgICBmaWxlbmFtZSArPSBwYXJzZWRVcmwucGF0aG5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDbGVhbiBhbmQgcmV0dXJuXHJcbiAgICAgICAgcmV0dXJuIGNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUoZmlsZW5hbWUpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgVVJMIHByb3ZpZGVkIHRvIGdlbmVyYXRlVXJsRmlsZW5hbWU6JywgdXJsKTtcclxuICAgICAgICAvLyBGYWxsIGJhY2sgdG8gY2xlYW5pbmcgdGhlIFVSTCBhcyBhIHN0cmluZ1xyXG4gICAgICAgIHJldHVybiBjbGVhblRlbXBvcmFyeUZpbGVuYW1lKHVybCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTYW5pdGl6ZSBhIGZpbGVuYW1lIGZvciBzYWZlIHNhdmluZ1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgLSBUaGUgZmlsZW5hbWUgdG8gc2FuaXRpemVcclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHNhbml0aXplZCBmaWxlbmFtZVxyXG4gKi9cclxuZnVuY3Rpb24gc2FuaXRpemVGaWxlbmFtZShmaWxlbmFtZSkge1xyXG4gICAgcmV0dXJuIGNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUoZmlsZW5hbWUpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUsXHJcbiAgICBnZXRCYXNlbmFtZSxcclxuICAgIGdlbmVyYXRlVXJsRmlsZW5hbWUsXHJcbiAgICBzYW5pdGl6ZUZpbGVuYW1lXHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUM1QixNQUFNO0VBQUVDO0FBQUksQ0FBQyxHQUFHRCxPQUFPLENBQUMsS0FBSyxDQUFDOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Usc0JBQXNCQSxDQUFDQyxRQUFRLEVBQUU7RUFDdEMsSUFBSSxDQUFDQSxRQUFRLEVBQUUsT0FBTyxTQUFTO0VBRS9CLE9BQU9BLFFBQVEsQ0FDVkMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQUEsQ0FDL0JBLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFBQSxDQUNyQkEsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztFQUFBLENBQ3JCQSxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFdBQVdBLENBQUNDLFFBQVEsRUFBRTtFQUMzQixNQUFNQyxRQUFRLEdBQUdSLElBQUksQ0FBQ1EsUUFBUSxDQUFDRCxRQUFRLENBQUM7RUFDeEMsTUFBTUUsT0FBTyxHQUFHRCxRQUFRLENBQUNFLFdBQVcsQ0FBQyxHQUFHLENBQUM7RUFDekMsT0FBT0QsT0FBTyxLQUFLLENBQUMsQ0FBQyxHQUFHRCxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0csS0FBSyxDQUFDLENBQUMsRUFBRUYsT0FBTyxDQUFDO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxtQkFBbUJBLENBQUNDLEdBQUcsRUFBRTtFQUM5QixJQUFJO0lBQ0EsTUFBTUMsU0FBUyxHQUFHLElBQUlaLEdBQUcsQ0FBQ1csR0FBRyxDQUFDO0lBQzlCLElBQUlULFFBQVEsR0FBR1UsU0FBUyxDQUFDQyxRQUFROztJQUVqQztJQUNBLElBQUlELFNBQVMsQ0FBQ0UsUUFBUSxLQUFLLEdBQUcsRUFBRTtNQUM1QlosUUFBUSxJQUFJVSxTQUFTLENBQUNFLFFBQVE7SUFDbEM7O0lBRUE7SUFDQSxPQUFPYixzQkFBc0IsQ0FBQ0MsUUFBUSxDQUFDO0VBQzNDLENBQUMsQ0FBQyxPQUFPYSxLQUFLLEVBQUU7SUFDWkMsT0FBTyxDQUFDQyxJQUFJLENBQUMsOENBQThDLEVBQUVOLEdBQUcsQ0FBQztJQUNqRTtJQUNBLE9BQU9WLHNCQUFzQixDQUFDVSxHQUFHLENBQUM7RUFDdEM7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU08sZ0JBQWdCQSxDQUFDaEIsUUFBUSxFQUFFO0VBQ2hDLE9BQU9ELHNCQUFzQixDQUFDQyxRQUFRLENBQUM7QUFDM0M7QUFFQWlCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2JuQixzQkFBc0I7RUFDdEJHLFdBQVc7RUFDWE0sbUJBQW1CO0VBQ25CUTtBQUNKLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=