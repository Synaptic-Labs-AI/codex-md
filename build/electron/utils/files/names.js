"use strict";

/**
 * File Name Utilities
 * Provides functions for handling file names and URLs
 * 
 * This module contains utilities for cleaning filenames, generating
 * URL-based filenames, and handling temporary files.
 * 
 * Used by:
 * - src/electron/services/ConversionResultManager.js
 * - src/electron/services/FileSystemService.js
 */

const path = require('path');
const {
  URL
} = require('url');

/**
 * Clean a filename to be safe for temporary storage
 * @param {string} filename - The filename to clean
 * @param {boolean} preserveNumbers - Whether to preserve numbers in the filename
 * @returns {string} The cleaned filename
 */
function cleanTemporaryFilename(filename, preserveNumbers = true) {
  if (!filename) return 'unknown';

  // For Excel/CSV files, it's especially important to preserve the exact filename
  // This is the only change we need to safely store the file
  return filename.replace(/[<>:"/\\|?*]+/g, '_'); // Replace only invalid file system characters
}

/**
 * Get the basename of a file path without extension
 * @param {string} filePath - The file path
 * @returns {string} The basename without extension
 */
function getBasename(filePath) {
  const basename = path.basename(filePath);

  // Keep any numbers, special characters, etc. in the filename
  // Just remove the extension
  const lastDot = basename.lastIndexOf('.');

  // Log the basename for debugging
  console.log(`[Files] Getting basename from: ${filePath} -> ${lastDot === -1 ? basename : basename.slice(0, lastDot)}`);
  return lastDot === -1 ? basename : basename.slice(0, lastDot);
}

/**
 * Generate a filename from a URL
 * @param {string} url - The URL to convert to a filename
 * @returns {string} The generated filename
 */
function generateUrlFilename(url) {
  try {
    const parsedUrl = new URL(url);
    let filename = parsedUrl.hostname;

    // Add path (excluding query and hash)
    if (parsedUrl.pathname !== '/') {
      filename += parsedUrl.pathname;
    }

    // Clean and return
    return cleanTemporaryFilename(filename);
  } catch (error) {
    console.warn('Invalid URL provided to generateUrlFilename:', url);
    // Fall back to cleaning the URL as a string
    return cleanTemporaryFilename(url);
  }
}

/**
 * Sanitize a filename for safe saving
 * @param {string} filename - The filename to sanitize
 * @returns {string} The sanitized filename
 */
function sanitizeFilename(filename) {
  return cleanTemporaryFilename(filename);
}
module.exports = {
  cleanTemporaryFilename,
  getBasename,
  generateUrlFilename,
  sanitizeFilename
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIlVSTCIsImNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUiLCJmaWxlbmFtZSIsInByZXNlcnZlTnVtYmVycyIsInJlcGxhY2UiLCJnZXRCYXNlbmFtZSIsImZpbGVQYXRoIiwiYmFzZW5hbWUiLCJsYXN0RG90IiwibGFzdEluZGV4T2YiLCJjb25zb2xlIiwibG9nIiwic2xpY2UiLCJnZW5lcmF0ZVVybEZpbGVuYW1lIiwidXJsIiwicGFyc2VkVXJsIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsImVycm9yIiwid2FybiIsInNhbml0aXplRmlsZW5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2VsZWN0cm9uL3V0aWxzL2ZpbGVzL25hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGaWxlIE5hbWUgVXRpbGl0aWVzXHJcbiAqIFByb3ZpZGVzIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgZmlsZSBuYW1lcyBhbmQgVVJMc1xyXG4gKiBcclxuICogVGhpcyBtb2R1bGUgY29udGFpbnMgdXRpbGl0aWVzIGZvciBjbGVhbmluZyBmaWxlbmFtZXMsIGdlbmVyYXRpbmdcclxuICogVVJMLWJhc2VkIGZpbGVuYW1lcywgYW5kIGhhbmRsaW5nIHRlbXBvcmFyeSBmaWxlcy5cclxuICogXHJcbiAqIFVzZWQgYnk6XHJcbiAqIC0gc3JjL2VsZWN0cm9uL3NlcnZpY2VzL0NvbnZlcnNpb25SZXN1bHRNYW5hZ2VyLmpzXHJcbiAqIC0gc3JjL2VsZWN0cm9uL3NlcnZpY2VzL0ZpbGVTeXN0ZW1TZXJ2aWNlLmpzXHJcbiAqL1xyXG5cclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuY29uc3QgeyBVUkwgfSA9IHJlcXVpcmUoJ3VybCcpO1xyXG5cclxuLyoqXHJcbiAqIENsZWFuIGEgZmlsZW5hbWUgdG8gYmUgc2FmZSBmb3IgdGVtcG9yYXJ5IHN0b3JhZ2VcclxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIC0gVGhlIGZpbGVuYW1lIHRvIGNsZWFuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJlc2VydmVOdW1iZXJzIC0gV2hldGhlciB0byBwcmVzZXJ2ZSBudW1iZXJzIGluIHRoZSBmaWxlbmFtZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY2xlYW5lZCBmaWxlbmFtZVxyXG4gKi9cclxuZnVuY3Rpb24gY2xlYW5UZW1wb3JhcnlGaWxlbmFtZShmaWxlbmFtZSwgcHJlc2VydmVOdW1iZXJzID0gdHJ1ZSkge1xyXG4gICAgaWYgKCFmaWxlbmFtZSkgcmV0dXJuICd1bmtub3duJztcclxuXHJcbiAgICAvLyBGb3IgRXhjZWwvQ1NWIGZpbGVzLCBpdCdzIGVzcGVjaWFsbHkgaW1wb3J0YW50IHRvIHByZXNlcnZlIHRoZSBleGFjdCBmaWxlbmFtZVxyXG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSBjaGFuZ2Ugd2UgbmVlZCB0byBzYWZlbHkgc3RvcmUgdGhlIGZpbGVcclxuICAgIHJldHVybiBmaWxlbmFtZVxyXG4gICAgICAgIC5yZXBsYWNlKC9bPD46XCIvXFxcXHw/Kl0rL2csICdfJyk7IC8vIFJlcGxhY2Ugb25seSBpbnZhbGlkIGZpbGUgc3lzdGVtIGNoYXJhY3RlcnNcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgYmFzZW5hbWUgb2YgYSBmaWxlIHBhdGggd2l0aG91dCBleHRlbnNpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoIC0gVGhlIGZpbGUgcGF0aFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYmFzZW5hbWUgd2l0aG91dCBleHRlbnNpb25cclxuICovXHJcbmZ1bmN0aW9uIGdldEJhc2VuYW1lKGZpbGVQYXRoKSB7XHJcbiAgICBjb25zdCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZVBhdGgpO1xyXG5cclxuICAgIC8vIEtlZXAgYW55IG51bWJlcnMsIHNwZWNpYWwgY2hhcmFjdGVycywgZXRjLiBpbiB0aGUgZmlsZW5hbWVcclxuICAgIC8vIEp1c3QgcmVtb3ZlIHRoZSBleHRlbnNpb25cclxuICAgIGNvbnN0IGxhc3REb3QgPSBiYXNlbmFtZS5sYXN0SW5kZXhPZignLicpO1xyXG5cclxuICAgIC8vIExvZyB0aGUgYmFzZW5hbWUgZm9yIGRlYnVnZ2luZ1xyXG4gICAgY29uc29sZS5sb2coYFtGaWxlc10gR2V0dGluZyBiYXNlbmFtZSBmcm9tOiAke2ZpbGVQYXRofSAtPiAke2xhc3REb3QgPT09IC0xID8gYmFzZW5hbWUgOiBiYXNlbmFtZS5zbGljZSgwLCBsYXN0RG90KX1gKTtcclxuXHJcbiAgICByZXR1cm4gbGFzdERvdCA9PT0gLTEgPyBiYXNlbmFtZSA6IGJhc2VuYW1lLnNsaWNlKDAsIGxhc3REb3QpO1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGUgYSBmaWxlbmFtZSBmcm9tIGEgVVJMXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIGNvbnZlcnQgdG8gYSBmaWxlbmFtZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIGZpbGVuYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZVVybEZpbGVuYW1lKHVybCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XHJcbiAgICAgICAgbGV0IGZpbGVuYW1lID0gcGFyc2VkVXJsLmhvc3RuYW1lO1xyXG5cclxuICAgICAgICAvLyBBZGQgcGF0aCAoZXhjbHVkaW5nIHF1ZXJ5IGFuZCBoYXNoKVxyXG4gICAgICAgIGlmIChwYXJzZWRVcmwucGF0aG5hbWUgIT09ICcvJykge1xyXG4gICAgICAgICAgICBmaWxlbmFtZSArPSBwYXJzZWRVcmwucGF0aG5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDbGVhbiBhbmQgcmV0dXJuXHJcbiAgICAgICAgcmV0dXJuIGNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUoZmlsZW5hbWUpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgVVJMIHByb3ZpZGVkIHRvIGdlbmVyYXRlVXJsRmlsZW5hbWU6JywgdXJsKTtcclxuICAgICAgICAvLyBGYWxsIGJhY2sgdG8gY2xlYW5pbmcgdGhlIFVSTCBhcyBhIHN0cmluZ1xyXG4gICAgICAgIHJldHVybiBjbGVhblRlbXBvcmFyeUZpbGVuYW1lKHVybCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTYW5pdGl6ZSBhIGZpbGVuYW1lIGZvciBzYWZlIHNhdmluZ1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgLSBUaGUgZmlsZW5hbWUgdG8gc2FuaXRpemVcclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHNhbml0aXplZCBmaWxlbmFtZVxyXG4gKi9cclxuZnVuY3Rpb24gc2FuaXRpemVGaWxlbmFtZShmaWxlbmFtZSkge1xyXG4gICAgcmV0dXJuIGNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUoZmlsZW5hbWUpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUsXHJcbiAgICBnZXRCYXNlbmFtZSxcclxuICAgIGdlbmVyYXRlVXJsRmlsZW5hbWUsXHJcbiAgICBzYW5pdGl6ZUZpbGVuYW1lXHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUM1QixNQUFNO0VBQUVDO0FBQUksQ0FBQyxHQUFHRCxPQUFPLENBQUMsS0FBSyxDQUFDOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxzQkFBc0JBLENBQUNDLFFBQVEsRUFBRUMsZUFBZSxHQUFHLElBQUksRUFBRTtFQUM5RCxJQUFJLENBQUNELFFBQVEsRUFBRSxPQUFPLFNBQVM7O0VBRS9CO0VBQ0E7RUFDQSxPQUFPQSxRQUFRLENBQ1ZFLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxXQUFXQSxDQUFDQyxRQUFRLEVBQUU7RUFDM0IsTUFBTUMsUUFBUSxHQUFHVCxJQUFJLENBQUNTLFFBQVEsQ0FBQ0QsUUFBUSxDQUFDOztFQUV4QztFQUNBO0VBQ0EsTUFBTUUsT0FBTyxHQUFHRCxRQUFRLENBQUNFLFdBQVcsQ0FBQyxHQUFHLENBQUM7O0VBRXpDO0VBQ0FDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGtDQUFrQ0wsUUFBUSxPQUFPRSxPQUFPLEtBQUssQ0FBQyxDQUFDLEdBQUdELFFBQVEsR0FBR0EsUUFBUSxDQUFDSyxLQUFLLENBQUMsQ0FBQyxFQUFFSixPQUFPLENBQUMsRUFBRSxDQUFDO0VBRXRILE9BQU9BLE9BQU8sS0FBSyxDQUFDLENBQUMsR0FBR0QsUUFBUSxHQUFHQSxRQUFRLENBQUNLLEtBQUssQ0FBQyxDQUFDLEVBQUVKLE9BQU8sQ0FBQztBQUNqRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssbUJBQW1CQSxDQUFDQyxHQUFHLEVBQUU7RUFDOUIsSUFBSTtJQUNBLE1BQU1DLFNBQVMsR0FBRyxJQUFJZixHQUFHLENBQUNjLEdBQUcsQ0FBQztJQUM5QixJQUFJWixRQUFRLEdBQUdhLFNBQVMsQ0FBQ0MsUUFBUTs7SUFFakM7SUFDQSxJQUFJRCxTQUFTLENBQUNFLFFBQVEsS0FBSyxHQUFHLEVBQUU7TUFDNUJmLFFBQVEsSUFBSWEsU0FBUyxDQUFDRSxRQUFRO0lBQ2xDOztJQUVBO0lBQ0EsT0FBT2hCLHNCQUFzQixDQUFDQyxRQUFRLENBQUM7RUFDM0MsQ0FBQyxDQUFDLE9BQU9nQixLQUFLLEVBQUU7SUFDWlIsT0FBTyxDQUFDUyxJQUFJLENBQUMsOENBQThDLEVBQUVMLEdBQUcsQ0FBQztJQUNqRTtJQUNBLE9BQU9iLHNCQUFzQixDQUFDYSxHQUFHLENBQUM7RUFDdEM7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU00sZ0JBQWdCQSxDQUFDbEIsUUFBUSxFQUFFO0VBQ2hDLE9BQU9ELHNCQUFzQixDQUFDQyxRQUFRLENBQUM7QUFDM0M7QUFFQW1CLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2JyQixzQkFBc0I7RUFDdEJJLFdBQVc7RUFDWFEsbUJBQW1CO0VBQ25CTztBQUNKLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=