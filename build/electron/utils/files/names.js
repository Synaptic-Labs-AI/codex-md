"use strict";

/**
 * File Name Utilities
 * Provides functions for handling file names and URLs
 * 
 * This module contains utilities for cleaning filenames, generating
 * URL-based filenames, and handling temporary files.
 * 
 * Used by:
 * - src/electron/services/ConversionResultManager.js
 * - src/electron/services/FileSystemService.js
 */

const path = require('path');
const {
  URL
} = require('url');

/**
 * Clean a filename to be safe for temporary storage
 * @param {string} filename - The filename to clean
 * @returns {string} The cleaned filename
 */
function cleanTemporaryFilename(filename) {
  if (!filename) return 'unknown';

  // Check if filename already contains a date timestamp pattern (e.g., _1234567890)
  // If it does, we need to extract the base name without the timestamp
  const dateTimestampPattern = /_\d{9,}(\.\w+)?$/;
  if (dateTimestampPattern.test(filename)) {
    console.log(`[Files] Detected timestamp in filename: ${filename}`);
    // Extract the part before the timestamp
    const baseNameMatch = filename.match(/(.+)_\d{9,}(\.\w+)?$/);
    if (baseNameMatch && baseNameMatch[1]) {
      filename = baseNameMatch[1];
      console.log(`[Files] Extracted base name: ${filename}`);
    }
  }
  return filename.replace(/[<>:"/\\|?*]+/g, '_') // Replace invalid characters
  .replace(/\s+/g, '_') // Replace spaces with underscores
  .replace(/__+/g, '_') // Replace multiple underscores with single
  .replace(/^_+|_+$/g, ''); // Trim underscores from start and end
}

/**
 * Get the basename of a file path without extension
 * @param {string} filePath - The file path
 * @returns {string} The basename without extension
 */
function getBasename(filePath) {
  const basename = path.basename(filePath);
  const lastDot = basename.lastIndexOf('.');
  return lastDot === -1 ? basename : basename.slice(0, lastDot);
}

/**
 * Generate a filename from a URL
 * @param {string} url - The URL to convert to a filename
 * @returns {string} The generated filename
 */
function generateUrlFilename(url) {
  try {
    const parsedUrl = new URL(url);
    let filename = parsedUrl.hostname;

    // Add path (excluding query and hash)
    if (parsedUrl.pathname !== '/') {
      filename += parsedUrl.pathname;
    }

    // Clean and return
    return cleanTemporaryFilename(filename);
  } catch (error) {
    console.warn('Invalid URL provided to generateUrlFilename:', url);
    // Fall back to cleaning the URL as a string
    return cleanTemporaryFilename(url);
  }
}

/**
 * Sanitize a filename for safe saving
 * @param {string} filename - The filename to sanitize
 * @returns {string} The sanitized filename
 */
function sanitizeFilename(filename) {
  return cleanTemporaryFilename(filename);
}
module.exports = {
  cleanTemporaryFilename,
  getBasename,
  generateUrlFilename,
  sanitizeFilename
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIlVSTCIsImNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUiLCJmaWxlbmFtZSIsImRhdGVUaW1lc3RhbXBQYXR0ZXJuIiwidGVzdCIsImNvbnNvbGUiLCJsb2ciLCJiYXNlTmFtZU1hdGNoIiwibWF0Y2giLCJyZXBsYWNlIiwiZ2V0QmFzZW5hbWUiLCJmaWxlUGF0aCIsImJhc2VuYW1lIiwibGFzdERvdCIsImxhc3RJbmRleE9mIiwic2xpY2UiLCJnZW5lcmF0ZVVybEZpbGVuYW1lIiwidXJsIiwicGFyc2VkVXJsIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsImVycm9yIiwid2FybiIsInNhbml0aXplRmlsZW5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2VsZWN0cm9uL3V0aWxzL2ZpbGVzL25hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGaWxlIE5hbWUgVXRpbGl0aWVzXHJcbiAqIFByb3ZpZGVzIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgZmlsZSBuYW1lcyBhbmQgVVJMc1xyXG4gKiBcclxuICogVGhpcyBtb2R1bGUgY29udGFpbnMgdXRpbGl0aWVzIGZvciBjbGVhbmluZyBmaWxlbmFtZXMsIGdlbmVyYXRpbmdcclxuICogVVJMLWJhc2VkIGZpbGVuYW1lcywgYW5kIGhhbmRsaW5nIHRlbXBvcmFyeSBmaWxlcy5cclxuICogXHJcbiAqIFVzZWQgYnk6XHJcbiAqIC0gc3JjL2VsZWN0cm9uL3NlcnZpY2VzL0NvbnZlcnNpb25SZXN1bHRNYW5hZ2VyLmpzXHJcbiAqIC0gc3JjL2VsZWN0cm9uL3NlcnZpY2VzL0ZpbGVTeXN0ZW1TZXJ2aWNlLmpzXHJcbiAqL1xyXG5cclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuY29uc3QgeyBVUkwgfSA9IHJlcXVpcmUoJ3VybCcpO1xyXG5cclxuLyoqXHJcbiAqIENsZWFuIGEgZmlsZW5hbWUgdG8gYmUgc2FmZSBmb3IgdGVtcG9yYXJ5IHN0b3JhZ2VcclxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIC0gVGhlIGZpbGVuYW1lIHRvIGNsZWFuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjbGVhbmVkIGZpbGVuYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBjbGVhblRlbXBvcmFyeUZpbGVuYW1lKGZpbGVuYW1lKSB7XHJcbiAgICBpZiAoIWZpbGVuYW1lKSByZXR1cm4gJ3Vua25vd24nO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGZpbGVuYW1lIGFscmVhZHkgY29udGFpbnMgYSBkYXRlIHRpbWVzdGFtcCBwYXR0ZXJuIChlLmcuLCBfMTIzNDU2Nzg5MClcclxuICAgIC8vIElmIGl0IGRvZXMsIHdlIG5lZWQgdG8gZXh0cmFjdCB0aGUgYmFzZSBuYW1lIHdpdGhvdXQgdGhlIHRpbWVzdGFtcFxyXG4gICAgY29uc3QgZGF0ZVRpbWVzdGFtcFBhdHRlcm4gPSAvX1xcZHs5LH0oXFwuXFx3Kyk/JC87XHJcbiAgICBpZiAoZGF0ZVRpbWVzdGFtcFBhdHRlcm4udGVzdChmaWxlbmFtZSkpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgW0ZpbGVzXSBEZXRlY3RlZCB0aW1lc3RhbXAgaW4gZmlsZW5hbWU6ICR7ZmlsZW5hbWV9YCk7XHJcbiAgICAgICAgLy8gRXh0cmFjdCB0aGUgcGFydCBiZWZvcmUgdGhlIHRpbWVzdGFtcFxyXG4gICAgICAgIGNvbnN0IGJhc2VOYW1lTWF0Y2ggPSBmaWxlbmFtZS5tYXRjaCgvKC4rKV9cXGR7OSx9KFxcLlxcdyspPyQvKTtcclxuICAgICAgICBpZiAoYmFzZU5hbWVNYXRjaCAmJiBiYXNlTmFtZU1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgIGZpbGVuYW1lID0gYmFzZU5hbWVNYXRjaFsxXTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtGaWxlc10gRXh0cmFjdGVkIGJhc2UgbmFtZTogJHtmaWxlbmFtZX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZpbGVuYW1lXHJcbiAgICAgICAgLnJlcGxhY2UoL1s8PjpcIi9cXFxcfD8qXSsvZywgJ18nKSAvLyBSZXBsYWNlIGludmFsaWQgY2hhcmFjdGVyc1xyXG4gICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICdfJykgLy8gUmVwbGFjZSBzcGFjZXMgd2l0aCB1bmRlcnNjb3Jlc1xyXG4gICAgICAgIC5yZXBsYWNlKC9fXysvZywgJ18nKSAvLyBSZXBsYWNlIG11bHRpcGxlIHVuZGVyc2NvcmVzIHdpdGggc2luZ2xlXHJcbiAgICAgICAgLnJlcGxhY2UoL15fK3xfKyQvZywgJycpOyAvLyBUcmltIHVuZGVyc2NvcmVzIGZyb20gc3RhcnQgYW5kIGVuZFxyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBiYXNlbmFtZSBvZiBhIGZpbGUgcGF0aCB3aXRob3V0IGV4dGVuc2lvblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZVBhdGggLSBUaGUgZmlsZSBwYXRoXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBiYXNlbmFtZSB3aXRob3V0IGV4dGVuc2lvblxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QmFzZW5hbWUoZmlsZVBhdGgpIHtcclxuICAgIGNvbnN0IGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XHJcbiAgICBjb25zdCBsYXN0RG90ID0gYmFzZW5hbWUubGFzdEluZGV4T2YoJy4nKTtcclxuICAgIHJldHVybiBsYXN0RG90ID09PSAtMSA/IGJhc2VuYW1lIDogYmFzZW5hbWUuc2xpY2UoMCwgbGFzdERvdCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSBhIGZpbGVuYW1lIGZyb20gYSBVUkxcclxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgdG8gY29udmVydCB0byBhIGZpbGVuYW1lXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgZmlsZW5hbWVcclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVXJsRmlsZW5hbWUodXJsKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcclxuICAgICAgICBsZXQgZmlsZW5hbWUgPSBwYXJzZWRVcmwuaG9zdG5hbWU7XHJcblxyXG4gICAgICAgIC8vIEFkZCBwYXRoIChleGNsdWRpbmcgcXVlcnkgYW5kIGhhc2gpXHJcbiAgICAgICAgaWYgKHBhcnNlZFVybC5wYXRobmFtZSAhPT0gJy8nKSB7XHJcbiAgICAgICAgICAgIGZpbGVuYW1lICs9IHBhcnNlZFVybC5wYXRobmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENsZWFuIGFuZCByZXR1cm5cclxuICAgICAgICByZXR1cm4gY2xlYW5UZW1wb3JhcnlGaWxlbmFtZShmaWxlbmFtZSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBVUkwgcHJvdmlkZWQgdG8gZ2VuZXJhdGVVcmxGaWxlbmFtZTonLCB1cmwpO1xyXG4gICAgICAgIC8vIEZhbGwgYmFjayB0byBjbGVhbmluZyB0aGUgVVJMIGFzIGEgc3RyaW5nXHJcbiAgICAgICAgcmV0dXJuIGNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUodXJsKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNhbml0aXplIGEgZmlsZW5hbWUgZm9yIHNhZmUgc2F2aW5nXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZSAtIFRoZSBmaWxlbmFtZSB0byBzYW5pdGl6ZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc2FuaXRpemVkIGZpbGVuYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBzYW5pdGl6ZUZpbGVuYW1lKGZpbGVuYW1lKSB7XHJcbiAgICByZXR1cm4gY2xlYW5UZW1wb3JhcnlGaWxlbmFtZShmaWxlbmFtZSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY2xlYW5UZW1wb3JhcnlGaWxlbmFtZSxcclxuICAgIGdldEJhc2VuYW1lLFxyXG4gICAgZ2VuZXJhdGVVcmxGaWxlbmFtZSxcclxuICAgIHNhbml0aXplRmlsZW5hbWVcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzVCLE1BQU07RUFBRUM7QUFBSSxDQUFDLEdBQUdELE9BQU8sQ0FBQyxLQUFLLENBQUM7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxzQkFBc0JBLENBQUNDLFFBQVEsRUFBRTtFQUN0QyxJQUFJLENBQUNBLFFBQVEsRUFBRSxPQUFPLFNBQVM7O0VBRS9CO0VBQ0E7RUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxrQkFBa0I7RUFDL0MsSUFBSUEsb0JBQW9CLENBQUNDLElBQUksQ0FBQ0YsUUFBUSxDQUFDLEVBQUU7SUFDckNHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDJDQUEyQ0osUUFBUSxFQUFFLENBQUM7SUFDbEU7SUFDQSxNQUFNSyxhQUFhLEdBQUdMLFFBQVEsQ0FBQ00sS0FBSyxDQUFDLHNCQUFzQixDQUFDO0lBQzVELElBQUlELGFBQWEsSUFBSUEsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ25DTCxRQUFRLEdBQUdLLGFBQWEsQ0FBQyxDQUFDLENBQUM7TUFDM0JGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGdDQUFnQ0osUUFBUSxFQUFFLENBQUM7SUFDM0Q7RUFDSjtFQUVBLE9BQU9BLFFBQVEsQ0FDVk8sT0FBTyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQUEsQ0FDL0JBLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFBQSxDQUNyQkEsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztFQUFBLENBQ3JCQSxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFdBQVdBLENBQUNDLFFBQVEsRUFBRTtFQUMzQixNQUFNQyxRQUFRLEdBQUdkLElBQUksQ0FBQ2MsUUFBUSxDQUFDRCxRQUFRLENBQUM7RUFDeEMsTUFBTUUsT0FBTyxHQUFHRCxRQUFRLENBQUNFLFdBQVcsQ0FBQyxHQUFHLENBQUM7RUFDekMsT0FBT0QsT0FBTyxLQUFLLENBQUMsQ0FBQyxHQUFHRCxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0csS0FBSyxDQUFDLENBQUMsRUFBRUYsT0FBTyxDQUFDO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxtQkFBbUJBLENBQUNDLEdBQUcsRUFBRTtFQUM5QixJQUFJO0lBQ0EsTUFBTUMsU0FBUyxHQUFHLElBQUlsQixHQUFHLENBQUNpQixHQUFHLENBQUM7SUFDOUIsSUFBSWYsUUFBUSxHQUFHZ0IsU0FBUyxDQUFDQyxRQUFROztJQUVqQztJQUNBLElBQUlELFNBQVMsQ0FBQ0UsUUFBUSxLQUFLLEdBQUcsRUFBRTtNQUM1QmxCLFFBQVEsSUFBSWdCLFNBQVMsQ0FBQ0UsUUFBUTtJQUNsQzs7SUFFQTtJQUNBLE9BQU9uQixzQkFBc0IsQ0FBQ0MsUUFBUSxDQUFDO0VBQzNDLENBQUMsQ0FBQyxPQUFPbUIsS0FBSyxFQUFFO0lBQ1poQixPQUFPLENBQUNpQixJQUFJLENBQUMsOENBQThDLEVBQUVMLEdBQUcsQ0FBQztJQUNqRTtJQUNBLE9BQU9oQixzQkFBc0IsQ0FBQ2dCLEdBQUcsQ0FBQztFQUN0QztBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTTSxnQkFBZ0JBLENBQUNyQixRQUFRLEVBQUU7RUFDaEMsT0FBT0Qsc0JBQXNCLENBQUNDLFFBQVEsQ0FBQztBQUMzQztBQUVBc0IsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDYnhCLHNCQUFzQjtFQUN0QlMsV0FBVztFQUNYTSxtQkFBbUI7RUFDbkJPO0FBQ0osQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==