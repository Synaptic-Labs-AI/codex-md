"use strict";

/**
 * Files utilities barrel file for electron
 * Exports all file-related utilities in an organized way
 * 
 * This file serves as the main entry point for file utilities in the electron process.
 * It re-exports utilities from types.js in various groupings to provide flexibility
 * in how they are imported by other modules.
 * 
 * Connected to:
 * - src/electron/converters/UnifiedConverterFactory.js
 * - src/electron/services/ElectronConversionService.js
 * - src/electron/ipc/handlers/conversion/
 */

const types = require('./types');
const names = require('./names');

// Group functions by category for organizational clarity
const fileTypes = {
  getFileHandlingInfo: types.getFileHandlingInfo,
  requiresApiKey: types.requiresApiKey,
  getFileType: types.getFileType,
  getFileContent: types.getFileContent,
  FILE_CATEGORIES: types.FILE_CATEGORIES,
  API_REQUIRED_TYPES: types.API_REQUIRED_TYPES,
  HANDLING_TYPES: types.HANDLING_TYPES,
  CONVERTER_CONFIG: types.CONVERTER_CONFIG
};

// CommonJS exports
module.exports = {
  // Types
  FILE_CATEGORIES: types.FILE_CATEGORIES,
  API_REQUIRED_TYPES: types.API_REQUIRED_TYPES,
  HANDLING_TYPES: types.HANDLING_TYPES,
  CONVERTER_CONFIG: types.CONVERTER_CONFIG,
  getFileHandlingInfo: types.getFileHandlingInfo,
  requiresApiKey: types.requiresApiKey,
  getFileType: types.getFileType,
  getFileContent: types.getFileContent,
  // File name utilities
  cleanTemporaryFilename: names.cleanTemporaryFilename,
  getBasename: names.getBasename,
  generateUrlFilename: names.generateUrlFilename,
  sanitizeFilename: names.sanitizeFilename,
  // Grouped exports
  fileTypes
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0eXBlcyIsInJlcXVpcmUiLCJuYW1lcyIsImZpbGVUeXBlcyIsImdldEZpbGVIYW5kbGluZ0luZm8iLCJyZXF1aXJlc0FwaUtleSIsImdldEZpbGVUeXBlIiwiZ2V0RmlsZUNvbnRlbnQiLCJGSUxFX0NBVEVHT1JJRVMiLCJBUElfUkVRVUlSRURfVFlQRVMiLCJIQU5ETElOR19UWVBFUyIsIkNPTlZFUlRFUl9DT05GSUciLCJtb2R1bGUiLCJleHBvcnRzIiwiY2xlYW5UZW1wb3JhcnlGaWxlbmFtZSIsImdldEJhc2VuYW1lIiwiZ2VuZXJhdGVVcmxGaWxlbmFtZSIsInNhbml0aXplRmlsZW5hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZWxlY3Ryb24vdXRpbHMvZmlsZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEZpbGVzIHV0aWxpdGllcyBiYXJyZWwgZmlsZSBmb3IgZWxlY3Ryb25cclxuICogRXhwb3J0cyBhbGwgZmlsZS1yZWxhdGVkIHV0aWxpdGllcyBpbiBhbiBvcmdhbml6ZWQgd2F5XHJcbiAqIFxyXG4gKiBUaGlzIGZpbGUgc2VydmVzIGFzIHRoZSBtYWluIGVudHJ5IHBvaW50IGZvciBmaWxlIHV0aWxpdGllcyBpbiB0aGUgZWxlY3Ryb24gcHJvY2Vzcy5cclxuICogSXQgcmUtZXhwb3J0cyB1dGlsaXRpZXMgZnJvbSB0eXBlcy5qcyBpbiB2YXJpb3VzIGdyb3VwaW5ncyB0byBwcm92aWRlIGZsZXhpYmlsaXR5XHJcbiAqIGluIGhvdyB0aGV5IGFyZSBpbXBvcnRlZCBieSBvdGhlciBtb2R1bGVzLlxyXG4gKiBcclxuICogQ29ubmVjdGVkIHRvOlxyXG4gKiAtIHNyYy9lbGVjdHJvbi9jb252ZXJ0ZXJzL1VuaWZpZWRDb252ZXJ0ZXJGYWN0b3J5LmpzXHJcbiAqIC0gc3JjL2VsZWN0cm9uL3NlcnZpY2VzL0VsZWN0cm9uQ29udmVyc2lvblNlcnZpY2UuanNcclxuICogLSBzcmMvZWxlY3Ryb24vaXBjL2hhbmRsZXJzL2NvbnZlcnNpb24vXHJcbiAqL1xyXG5cclxuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7XHJcblxyXG5jb25zdCBuYW1lcyA9IHJlcXVpcmUoJy4vbmFtZXMnKTtcclxuXHJcbi8vIEdyb3VwIGZ1bmN0aW9ucyBieSBjYXRlZ29yeSBmb3Igb3JnYW5pemF0aW9uYWwgY2xhcml0eVxyXG5jb25zdCBmaWxlVHlwZXMgPSB7XHJcbiAgZ2V0RmlsZUhhbmRsaW5nSW5mbzogdHlwZXMuZ2V0RmlsZUhhbmRsaW5nSW5mbyxcclxuICByZXF1aXJlc0FwaUtleTogdHlwZXMucmVxdWlyZXNBcGlLZXksXHJcbiAgZ2V0RmlsZVR5cGU6IHR5cGVzLmdldEZpbGVUeXBlLFxyXG4gIGdldEZpbGVDb250ZW50OiB0eXBlcy5nZXRGaWxlQ29udGVudCxcclxuICBGSUxFX0NBVEVHT1JJRVM6IHR5cGVzLkZJTEVfQ0FURUdPUklFUyxcclxuICBBUElfUkVRVUlSRURfVFlQRVM6IHR5cGVzLkFQSV9SRVFVSVJFRF9UWVBFUyxcclxuICBIQU5ETElOR19UWVBFUzogdHlwZXMuSEFORExJTkdfVFlQRVMsXHJcbiAgQ09OVkVSVEVSX0NPTkZJRzogdHlwZXMuQ09OVkVSVEVSX0NPTkZJR1xyXG59O1xyXG5cclxuLy8gQ29tbW9uSlMgZXhwb3J0c1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAvLyBUeXBlc1xyXG4gIEZJTEVfQ0FURUdPUklFUzogdHlwZXMuRklMRV9DQVRFR09SSUVTLFxyXG4gIEFQSV9SRVFVSVJFRF9UWVBFUzogdHlwZXMuQVBJX1JFUVVJUkVEX1RZUEVTLFxyXG4gIEhBTkRMSU5HX1RZUEVTOiB0eXBlcy5IQU5ETElOR19UWVBFUyxcclxuICBDT05WRVJURVJfQ09ORklHOiB0eXBlcy5DT05WRVJURVJfQ09ORklHLFxyXG4gIGdldEZpbGVIYW5kbGluZ0luZm86IHR5cGVzLmdldEZpbGVIYW5kbGluZ0luZm8sXHJcbiAgcmVxdWlyZXNBcGlLZXk6IHR5cGVzLnJlcXVpcmVzQXBpS2V5LFxyXG4gIGdldEZpbGVUeXBlOiB0eXBlcy5nZXRGaWxlVHlwZSxcclxuICBnZXRGaWxlQ29udGVudDogdHlwZXMuZ2V0RmlsZUNvbnRlbnQsXHJcbiAgXHJcbiAgLy8gRmlsZSBuYW1lIHV0aWxpdGllc1xyXG4gIGNsZWFuVGVtcG9yYXJ5RmlsZW5hbWU6IG5hbWVzLmNsZWFuVGVtcG9yYXJ5RmlsZW5hbWUsXHJcbiAgZ2V0QmFzZW5hbWU6IG5hbWVzLmdldEJhc2VuYW1lLFxyXG4gIGdlbmVyYXRlVXJsRmlsZW5hbWU6IG5hbWVzLmdlbmVyYXRlVXJsRmlsZW5hbWUsXHJcbiAgc2FuaXRpemVGaWxlbmFtZTogbmFtZXMuc2FuaXRpemVGaWxlbmFtZSxcclxuICBcclxuICAvLyBHcm91cGVkIGV4cG9ydHNcclxuICBmaWxlVHlwZXNcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUVoQyxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7O0FBRWhDO0FBQ0EsTUFBTUUsU0FBUyxHQUFHO0VBQ2hCQyxtQkFBbUIsRUFBRUosS0FBSyxDQUFDSSxtQkFBbUI7RUFDOUNDLGNBQWMsRUFBRUwsS0FBSyxDQUFDSyxjQUFjO0VBQ3BDQyxXQUFXLEVBQUVOLEtBQUssQ0FBQ00sV0FBVztFQUM5QkMsY0FBYyxFQUFFUCxLQUFLLENBQUNPLGNBQWM7RUFDcENDLGVBQWUsRUFBRVIsS0FBSyxDQUFDUSxlQUFlO0VBQ3RDQyxrQkFBa0IsRUFBRVQsS0FBSyxDQUFDUyxrQkFBa0I7RUFDNUNDLGNBQWMsRUFBRVYsS0FBSyxDQUFDVSxjQUFjO0VBQ3BDQyxnQkFBZ0IsRUFBRVgsS0FBSyxDQUFDVztBQUMxQixDQUFDOztBQUVEO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2Y7RUFDQUwsZUFBZSxFQUFFUixLQUFLLENBQUNRLGVBQWU7RUFDdENDLGtCQUFrQixFQUFFVCxLQUFLLENBQUNTLGtCQUFrQjtFQUM1Q0MsY0FBYyxFQUFFVixLQUFLLENBQUNVLGNBQWM7RUFDcENDLGdCQUFnQixFQUFFWCxLQUFLLENBQUNXLGdCQUFnQjtFQUN4Q1AsbUJBQW1CLEVBQUVKLEtBQUssQ0FBQ0ksbUJBQW1CO0VBQzlDQyxjQUFjLEVBQUVMLEtBQUssQ0FBQ0ssY0FBYztFQUNwQ0MsV0FBVyxFQUFFTixLQUFLLENBQUNNLFdBQVc7RUFDOUJDLGNBQWMsRUFBRVAsS0FBSyxDQUFDTyxjQUFjO0VBRXBDO0VBQ0FPLHNCQUFzQixFQUFFWixLQUFLLENBQUNZLHNCQUFzQjtFQUNwREMsV0FBVyxFQUFFYixLQUFLLENBQUNhLFdBQVc7RUFDOUJDLG1CQUFtQixFQUFFZCxLQUFLLENBQUNjLG1CQUFtQjtFQUM5Q0MsZ0JBQWdCLEVBQUVmLEtBQUssQ0FBQ2UsZ0JBQWdCO0VBRXhDO0VBQ0FkO0FBQ0YsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==