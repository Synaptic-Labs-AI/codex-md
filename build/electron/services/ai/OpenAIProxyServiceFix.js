"use strict";

/**
 * OpenAIProxyService Fix
 * 
 * This file provides a fix for the OpenAIProxyService that was failing with
 * "TypeError: axiosRetry is not a function" error.
 * 
 * The issue is that axios-retry v4.x.x exports differently than v3.x.x,
 * and the code was expecting the older version's export pattern.
 */

// Import the correct version of axios-retry
let axiosRetry;
try {
  // Try to import the module
  const axiosRetryModule = require('axios-retry');

  // Check if it's a function (v3.x.x) or an object with default export (v4.x.x)
  if (typeof axiosRetryModule === 'function') {
    // v3.x.x
    axiosRetry = axiosRetryModule;
  } else if (axiosRetryModule && typeof axiosRetryModule.default === 'function') {
    // v4.x.x
    axiosRetry = axiosRetryModule.default;
  } else {
    // Fallback implementation
    console.warn('⚠️ Could not load axios-retry properly, using fallback implementation');
    axiosRetry = (axios, options) => {
      console.log('Using fallback axios-retry implementation');
      // Simple fallback that doesn't actually retry but prevents errors
      return axios;
    };
  }
} catch (error) {
  console.error('❌ Failed to load axios-retry:', error);
  // Fallback implementation
  axiosRetry = (axios, options) => {
    console.log('Using fallback axios-retry implementation due to error:', error.message);
    return axios;
  };
}

// Export the fixed axiosRetry function
module.exports = axiosRetry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheGlvc1JldHJ5IiwiYXhpb3NSZXRyeU1vZHVsZSIsInJlcXVpcmUiLCJkZWZhdWx0IiwiY29uc29sZSIsIndhcm4iLCJheGlvcyIsIm9wdGlvbnMiLCJsb2ciLCJlcnJvciIsIm1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2VsZWN0cm9uL3NlcnZpY2VzL2FpL09wZW5BSVByb3h5U2VydmljZUZpeC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9wZW5BSVByb3h5U2VydmljZSBGaXhcbiAqIFxuICogVGhpcyBmaWxlIHByb3ZpZGVzIGEgZml4IGZvciB0aGUgT3BlbkFJUHJveHlTZXJ2aWNlIHRoYXQgd2FzIGZhaWxpbmcgd2l0aFxuICogXCJUeXBlRXJyb3I6IGF4aW9zUmV0cnkgaXMgbm90IGEgZnVuY3Rpb25cIiBlcnJvci5cbiAqIFxuICogVGhlIGlzc3VlIGlzIHRoYXQgYXhpb3MtcmV0cnkgdjQueC54IGV4cG9ydHMgZGlmZmVyZW50bHkgdGhhbiB2My54LngsXG4gKiBhbmQgdGhlIGNvZGUgd2FzIGV4cGVjdGluZyB0aGUgb2xkZXIgdmVyc2lvbidzIGV4cG9ydCBwYXR0ZXJuLlxuICovXG5cbi8vIEltcG9ydCB0aGUgY29ycmVjdCB2ZXJzaW9uIG9mIGF4aW9zLXJldHJ5XG5sZXQgYXhpb3NSZXRyeTtcbnRyeSB7XG4gIC8vIFRyeSB0byBpbXBvcnQgdGhlIG1vZHVsZVxuICBjb25zdCBheGlvc1JldHJ5TW9kdWxlID0gcmVxdWlyZSgnYXhpb3MtcmV0cnknKTtcbiAgXG4gIC8vIENoZWNrIGlmIGl0J3MgYSBmdW5jdGlvbiAodjMueC54KSBvciBhbiBvYmplY3Qgd2l0aCBkZWZhdWx0IGV4cG9ydCAodjQueC54KVxuICBpZiAodHlwZW9mIGF4aW9zUmV0cnlNb2R1bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyB2My54LnhcbiAgICBheGlvc1JldHJ5ID0gYXhpb3NSZXRyeU1vZHVsZTtcbiAgfSBlbHNlIGlmIChheGlvc1JldHJ5TW9kdWxlICYmIHR5cGVvZiBheGlvc1JldHJ5TW9kdWxlLmRlZmF1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyB2NC54LnhcbiAgICBheGlvc1JldHJ5ID0gYXhpb3NSZXRyeU1vZHVsZS5kZWZhdWx0O1xuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrIGltcGxlbWVudGF0aW9uXG4gICAgY29uc29sZS53YXJuKCfimqDvuI8gQ291bGQgbm90IGxvYWQgYXhpb3MtcmV0cnkgcHJvcGVybHksIHVzaW5nIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uJyk7XG4gICAgYXhpb3NSZXRyeSA9IChheGlvcywgb3B0aW9ucykgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1VzaW5nIGZhbGxiYWNrIGF4aW9zLXJldHJ5IGltcGxlbWVudGF0aW9uJyk7XG4gICAgICAvLyBTaW1wbGUgZmFsbGJhY2sgdGhhdCBkb2Vzbid0IGFjdHVhbGx5IHJldHJ5IGJ1dCBwcmV2ZW50cyBlcnJvcnNcbiAgICAgIHJldHVybiBheGlvcztcbiAgICB9O1xuICB9XG59IGNhdGNoIChlcnJvcikge1xuICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIGxvYWQgYXhpb3MtcmV0cnk6JywgZXJyb3IpO1xuICAvLyBGYWxsYmFjayBpbXBsZW1lbnRhdGlvblxuICBheGlvc1JldHJ5ID0gKGF4aW9zLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1VzaW5nIGZhbGxiYWNrIGF4aW9zLXJldHJ5IGltcGxlbWVudGF0aW9uIGR1ZSB0byBlcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcbiAgICByZXR1cm4gYXhpb3M7XG4gIH07XG59XG5cbi8vIEV4cG9ydCB0aGUgZml4ZWQgYXhpb3NSZXRyeSBmdW5jdGlvblxubW9kdWxlLmV4cG9ydHMgPSBheGlvc1JldHJ5O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUlBLFVBQVU7QUFDZCxJQUFJO0VBQ0Y7RUFDQSxNQUFNQyxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDLGFBQWEsQ0FBQzs7RUFFL0M7RUFDQSxJQUFJLE9BQU9ELGdCQUFnQixLQUFLLFVBQVUsRUFBRTtJQUMxQztJQUNBRCxVQUFVLEdBQUdDLGdCQUFnQjtFQUMvQixDQUFDLE1BQU0sSUFBSUEsZ0JBQWdCLElBQUksT0FBT0EsZ0JBQWdCLENBQUNFLE9BQU8sS0FBSyxVQUFVLEVBQUU7SUFDN0U7SUFDQUgsVUFBVSxHQUFHQyxnQkFBZ0IsQ0FBQ0UsT0FBTztFQUN2QyxDQUFDLE1BQU07SUFDTDtJQUNBQyxPQUFPLENBQUNDLElBQUksQ0FBQyx1RUFBdUUsQ0FBQztJQUNyRkwsVUFBVSxHQUFHQSxDQUFDTSxLQUFLLEVBQUVDLE9BQU8sS0FBSztNQUMvQkgsT0FBTyxDQUFDSSxHQUFHLENBQUMsMkNBQTJDLENBQUM7TUFDeEQ7TUFDQSxPQUFPRixLQUFLO0lBQ2QsQ0FBQztFQUNIO0FBQ0YsQ0FBQyxDQUFDLE9BQU9HLEtBQUssRUFBRTtFQUNkTCxPQUFPLENBQUNLLEtBQUssQ0FBQywrQkFBK0IsRUFBRUEsS0FBSyxDQUFDO0VBQ3JEO0VBQ0FULFVBQVUsR0FBR0EsQ0FBQ00sS0FBSyxFQUFFQyxPQUFPLEtBQUs7SUFDL0JILE9BQU8sQ0FBQ0ksR0FBRyxDQUFDLHlEQUF5RCxFQUFFQyxLQUFLLENBQUNDLE9BQU8sQ0FBQztJQUNyRixPQUFPSixLQUFLO0VBQ2QsQ0FBQztBQUNIOztBQUVBO0FBQ0FLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHWixVQUFVIiwiaWdub3JlTGlzdCI6W119