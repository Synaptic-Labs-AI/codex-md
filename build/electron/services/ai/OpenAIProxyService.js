"use strict";

/**
 * OpenAIProxyService.js
 * This is a placeholder service that replaces the original OpenAI integration.
 * The application now uses Deepgram for transcription instead of OpenAI.
 * 
 * This file exists to maintain backward compatibility with code that
 * expects OpenAIProxyService to be available.
 * 
 * For the full implementation, see OpenAIProxyService.deprecated.js
 */

const BaseService = require('../BaseService');
class OpenAIProxyServicePlaceholder extends BaseService {
  constructor() {
    super();
    this.openai = null;
  }
  setupIpcHandlers() {
    this.registerHandler('openai:configure', this.handleConfigure.bind(this));
    this.registerHandler('openai:transcribe', this.handleTranscribe.bind(this));
    this.registerHandler('openai:complete', this.handleComplete.bind(this));
    this.registerHandler('openai:check-key', this.handleCheckKey.bind(this));
  }
  async handleConfigure(event, {
    apiKey
  }) {
    console.log('[OpenAIProxyService] OpenAI functionality has been replaced with Deepgram for transcription');
    return {
      success: false,
      error: 'OpenAI functionality has been replaced with Deepgram for transcription. Please update your settings to use Deepgram API key instead.'
    };
  }
  async handleTranscribe(event, {
    audioPath,
    language = 'en',
    prompt = '',
    model = 'whisper'
  }) {
    console.log('[OpenAIProxyService] Transcription has been moved to Deepgram');
    throw new Error('Transcription has been moved to Deepgram. Please use the DeepgramService instead.');
  }
  async handleComplete(event, {
    prompt,
    model = 'gpt-3.5-turbo',
    options = {}
  }) {
    console.log('[OpenAIProxyService] OpenAI completion is no longer supported');
    throw new Error('OpenAI functionality is no longer supported.');
  }
  async handleCheckKey(event) {
    console.log('[OpenAIProxyService] OpenAI functionality has been replaced with Deepgram');
    return {
      valid: false,
      error: 'OpenAI functionality has been replaced with Deepgram for transcription. Please update your settings to use Deepgram API key instead.'
    };
  }
}

// Create a single instance of the service
const instance = new OpenAIProxyServicePlaceholder();

// Export an object containing the instance
module.exports = {
  instance
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXNlU2VydmljZSIsInJlcXVpcmUiLCJPcGVuQUlQcm94eVNlcnZpY2VQbGFjZWhvbGRlciIsImNvbnN0cnVjdG9yIiwib3BlbmFpIiwic2V0dXBJcGNIYW5kbGVycyIsInJlZ2lzdGVySGFuZGxlciIsImhhbmRsZUNvbmZpZ3VyZSIsImJpbmQiLCJoYW5kbGVUcmFuc2NyaWJlIiwiaGFuZGxlQ29tcGxldGUiLCJoYW5kbGVDaGVja0tleSIsImV2ZW50IiwiYXBpS2V5IiwiY29uc29sZSIsImxvZyIsInN1Y2Nlc3MiLCJlcnJvciIsImF1ZGlvUGF0aCIsImxhbmd1YWdlIiwicHJvbXB0IiwibW9kZWwiLCJFcnJvciIsIm9wdGlvbnMiLCJ2YWxpZCIsImluc3RhbmNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9lbGVjdHJvbi9zZXJ2aWNlcy9haS9PcGVuQUlQcm94eVNlcnZpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE9wZW5BSVByb3h5U2VydmljZS5qc1xyXG4gKiBUaGlzIGlzIGEgcGxhY2Vob2xkZXIgc2VydmljZSB0aGF0IHJlcGxhY2VzIHRoZSBvcmlnaW5hbCBPcGVuQUkgaW50ZWdyYXRpb24uXHJcbiAqIFRoZSBhcHBsaWNhdGlvbiBub3cgdXNlcyBEZWVwZ3JhbSBmb3IgdHJhbnNjcmlwdGlvbiBpbnN0ZWFkIG9mIE9wZW5BSS5cclxuICogXHJcbiAqIFRoaXMgZmlsZSBleGlzdHMgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIGNvZGUgdGhhdFxyXG4gKiBleHBlY3RzIE9wZW5BSVByb3h5U2VydmljZSB0byBiZSBhdmFpbGFibGUuXHJcbiAqIFxyXG4gKiBGb3IgdGhlIGZ1bGwgaW1wbGVtZW50YXRpb24sIHNlZSBPcGVuQUlQcm94eVNlcnZpY2UuZGVwcmVjYXRlZC5qc1xyXG4gKi9cclxuXHJcbmNvbnN0IEJhc2VTZXJ2aWNlID0gcmVxdWlyZSgnLi4vQmFzZVNlcnZpY2UnKTtcclxuXHJcbmNsYXNzIE9wZW5BSVByb3h5U2VydmljZVBsYWNlaG9sZGVyIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLm9wZW5haSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0dXBJcGNIYW5kbGVycygpIHtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVySGFuZGxlcignb3BlbmFpOmNvbmZpZ3VyZScsIHRoaXMuaGFuZGxlQ29uZmlndXJlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJIYW5kbGVyKCdvcGVuYWk6dHJhbnNjcmliZScsIHRoaXMuaGFuZGxlVHJhbnNjcmliZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVySGFuZGxlcignb3BlbmFpOmNvbXBsZXRlJywgdGhpcy5oYW5kbGVDb21wbGV0ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVySGFuZGxlcignb3BlbmFpOmNoZWNrLWtleScsIHRoaXMuaGFuZGxlQ2hlY2tLZXkuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaGFuZGxlQ29uZmlndXJlKGV2ZW50LCB7IGFwaUtleSB9KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1tPcGVuQUlQcm94eVNlcnZpY2VdIE9wZW5BSSBmdW5jdGlvbmFsaXR5IGhhcyBiZWVuIHJlcGxhY2VkIHdpdGggRGVlcGdyYW0gZm9yIHRyYW5zY3JpcHRpb24nKTtcclxuICAgICAgICByZXR1cm4geyBcclxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIGVycm9yOiAnT3BlbkFJIGZ1bmN0aW9uYWxpdHkgaGFzIGJlZW4gcmVwbGFjZWQgd2l0aCBEZWVwZ3JhbSBmb3IgdHJhbnNjcmlwdGlvbi4gUGxlYXNlIHVwZGF0ZSB5b3VyIHNldHRpbmdzIHRvIHVzZSBEZWVwZ3JhbSBBUEkga2V5IGluc3RlYWQuJ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaGFuZGxlVHJhbnNjcmliZShldmVudCwgeyBhdWRpb1BhdGgsIGxhbmd1YWdlID0gJ2VuJywgcHJvbXB0ID0gJycsIG1vZGVsID0gJ3doaXNwZXInIH0pIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnW09wZW5BSVByb3h5U2VydmljZV0gVHJhbnNjcmlwdGlvbiBoYXMgYmVlbiBtb3ZlZCB0byBEZWVwZ3JhbScpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNjcmlwdGlvbiBoYXMgYmVlbiBtb3ZlZCB0byBEZWVwZ3JhbS4gUGxlYXNlIHVzZSB0aGUgRGVlcGdyYW1TZXJ2aWNlIGluc3RlYWQuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaGFuZGxlQ29tcGxldGUoZXZlbnQsIHsgcHJvbXB0LCBtb2RlbCA9ICdncHQtMy41LXR1cmJvJywgb3B0aW9ucyA9IHt9IH0pIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnW09wZW5BSVByb3h5U2VydmljZV0gT3BlbkFJIGNvbXBsZXRpb24gaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCcpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignT3BlbkFJIGZ1bmN0aW9uYWxpdHkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4nKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBoYW5kbGVDaGVja0tleShldmVudCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdbT3BlbkFJUHJveHlTZXJ2aWNlXSBPcGVuQUkgZnVuY3Rpb25hbGl0eSBoYXMgYmVlbiByZXBsYWNlZCB3aXRoIERlZXBncmFtJyk7XHJcbiAgICAgICAgcmV0dXJuIHsgXHJcbiAgICAgICAgICAgIHZhbGlkOiBmYWxzZSwgXHJcbiAgICAgICAgICAgIGVycm9yOiAnT3BlbkFJIGZ1bmN0aW9uYWxpdHkgaGFzIGJlZW4gcmVwbGFjZWQgd2l0aCBEZWVwZ3JhbSBmb3IgdHJhbnNjcmlwdGlvbi4gUGxlYXNlIHVwZGF0ZSB5b3VyIHNldHRpbmdzIHRvIHVzZSBEZWVwZ3JhbSBBUEkga2V5IGluc3RlYWQuJ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENyZWF0ZSBhIHNpbmdsZSBpbnN0YW5jZSBvZiB0aGUgc2VydmljZVxyXG5jb25zdCBpbnN0YW5jZSA9IG5ldyBPcGVuQUlQcm94eVNlcnZpY2VQbGFjZWhvbGRlcigpO1xyXG5cclxuLy8gRXhwb3J0IGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBpbnN0YW5jZVxyXG5tb2R1bGUuZXhwb3J0cyA9IHsgaW5zdGFuY2UgfTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFFN0MsTUFBTUMsNkJBQTZCLFNBQVNGLFdBQVcsQ0FBQztFQUNwREcsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJO0VBQ3RCO0VBRUFDLGdCQUFnQkEsQ0FBQSxFQUFHO0lBQ2YsSUFBSSxDQUFDQyxlQUFlLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDQyxlQUFlLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RSxJQUFJLENBQUNGLGVBQWUsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUNHLGdCQUFnQixDQUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0UsSUFBSSxDQUFDRixlQUFlLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDSSxjQUFjLENBQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RSxJQUFJLENBQUNGLGVBQWUsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUNLLGNBQWMsQ0FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQzVFO0VBRUEsTUFBTUQsZUFBZUEsQ0FBQ0ssS0FBSyxFQUFFO0lBQUVDO0VBQU8sQ0FBQyxFQUFFO0lBQ3JDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyw2RkFBNkYsQ0FBQztJQUMxRyxPQUFPO01BQ0hDLE9BQU8sRUFBRSxLQUFLO01BQ2RDLEtBQUssRUFBRTtJQUNYLENBQUM7RUFDTDtFQUVBLE1BQU1SLGdCQUFnQkEsQ0FBQ0csS0FBSyxFQUFFO0lBQUVNLFNBQVM7SUFBRUMsUUFBUSxHQUFHLElBQUk7SUFBRUMsTUFBTSxHQUFHLEVBQUU7SUFBRUMsS0FBSyxHQUFHO0VBQVUsQ0FBQyxFQUFFO0lBQzFGUCxPQUFPLENBQUNDLEdBQUcsQ0FBQywrREFBK0QsQ0FBQztJQUM1RSxNQUFNLElBQUlPLEtBQUssQ0FBQyxtRkFBbUYsQ0FBQztFQUN4RztFQUVBLE1BQU1aLGNBQWNBLENBQUNFLEtBQUssRUFBRTtJQUFFUSxNQUFNO0lBQUVDLEtBQUssR0FBRyxlQUFlO0lBQUVFLE9BQU8sR0FBRyxDQUFDO0VBQUUsQ0FBQyxFQUFFO0lBQzNFVCxPQUFPLENBQUNDLEdBQUcsQ0FBQywrREFBK0QsQ0FBQztJQUM1RSxNQUFNLElBQUlPLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQztFQUNuRTtFQUVBLE1BQU1YLGNBQWNBLENBQUNDLEtBQUssRUFBRTtJQUN4QkUsT0FBTyxDQUFDQyxHQUFHLENBQUMsMkVBQTJFLENBQUM7SUFDeEYsT0FBTztNQUNIUyxLQUFLLEVBQUUsS0FBSztNQUNaUCxLQUFLLEVBQUU7SUFDWCxDQUFDO0VBQ0w7QUFDSjs7QUFFQTtBQUNBLE1BQU1RLFFBQVEsR0FBRyxJQUFJdkIsNkJBQTZCLENBQUMsQ0FBQzs7QUFFcEQ7QUFDQXdCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQUVGO0FBQVMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==