"use strict";

/**
 * API Key IPC Handlers
 * Implements handlers for API key management operations.
 *
 * Related files:
 * - services/ApiKeyService.js: API key storage and validation
 * - ipc/handlers.js: Handler registration
 * - preload.js: API exposure to renderer
 */

const {
  ipcMain
} = require('electron');
const apiKeyService = require('../../../services/ApiKeyService');
const {
  IPCChannels
} = require('../../types');

/**
 * Update environment variables with latest API keys
 * This ensures converters have access to the latest API keys
 */
function updateApiKeyEnvironment(provider, key) {
  try {
    // Map provider to environment variable name
    const envMap = {
      'mistral': 'MISTRAL_API_KEY',
      'deepgram': 'DEEPGRAM_API_KEY'
    };
    const envVar = envMap[provider];
    if (!envVar) return;

    // Update environment variable
    if (key) {
      process.env[envVar] = key;
      console.log(`✅ Updated ${envVar} environment variable`);
    } else {
      delete process.env[envVar];
      console.log(`❌ Removed ${envVar} environment variable`);
    }
  } catch (error) {
    console.error(`Error updating API key environment for ${provider}:`, error);
  }
}

/**
 * Register all API key related IPC handlers
 */
function registerApiKeyHandlers() {
  // Save API key
  ipcMain.handle('codex:apikey:save', async (event, {
    key,
    provider = 'mistral'
  }) => {
    const result = await apiKeyService.saveApiKey(key, provider);

    // Update environment variable with the new key
    if (result.success) {
      updateApiKeyEnvironment(provider, key);
    }
    return result;
  });

  // Check if API key exists
  ipcMain.handle('codex:apikey:exists', async (event, {
    provider = 'mistral'
  }) => {
    return {
      exists: apiKeyService.hasApiKey(provider)
    };
  });

  // Delete API key
  ipcMain.handle('codex:apikey:delete', async (event, {
    provider = 'mistral'
  }) => {
    const result = apiKeyService.deleteApiKey(provider);

    // Remove environment variable when key is deleted
    if (result.success) {
      updateApiKeyEnvironment(provider, null);
    }
    return result;
  });

  // Validate API key
  ipcMain.handle('codex:apikey:validate', async (event, {
    key,
    provider = 'mistral'
  }) => {
    return await apiKeyService.validateApiKey(key, provider);
  });

  // Get API key for internal use (only available to main process)
  ipcMain.handle('codex:apikey:get-for-service', async (event, {
    provider = 'mistral'
  }) => {
    // Security check: only allow main process to access this
    const webContents = event.sender;
    if (webContents.getType() !== 'browserWindow') {
      return {
        success: false,
        error: 'Unauthorized access'
      };
    }
    const key = apiKeyService.getApiKey(provider);
    return {
      success: !!key,
      key
    };
  });
  console.log('API Key IPC handlers registered');
}

/**
 * Clean up any resources when the app is shutting down
 */
async function cleanupApiKeyHandlers() {
  // No cleanup needed for API key handlers
}
module.exports = {
  registerApiKeyHandlers,
  cleanupApiKeyHandlers
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpcGNNYWluIiwicmVxdWlyZSIsImFwaUtleVNlcnZpY2UiLCJJUENDaGFubmVscyIsInVwZGF0ZUFwaUtleUVudmlyb25tZW50IiwicHJvdmlkZXIiLCJrZXkiLCJlbnZNYXAiLCJlbnZWYXIiLCJwcm9jZXNzIiwiZW52IiwiY29uc29sZSIsImxvZyIsImVycm9yIiwicmVnaXN0ZXJBcGlLZXlIYW5kbGVycyIsImhhbmRsZSIsImV2ZW50IiwicmVzdWx0Iiwic2F2ZUFwaUtleSIsInN1Y2Nlc3MiLCJleGlzdHMiLCJoYXNBcGlLZXkiLCJkZWxldGVBcGlLZXkiLCJ2YWxpZGF0ZUFwaUtleSIsIndlYkNvbnRlbnRzIiwic2VuZGVyIiwiZ2V0VHlwZSIsImdldEFwaUtleSIsImNsZWFudXBBcGlLZXlIYW5kbGVycyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZWxlY3Ryb24vaXBjL2hhbmRsZXJzL2FwaWtleS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQVBJIEtleSBJUEMgSGFuZGxlcnNcclxuICogSW1wbGVtZW50cyBoYW5kbGVycyBmb3IgQVBJIGtleSBtYW5hZ2VtZW50IG9wZXJhdGlvbnMuXHJcbiAqXHJcbiAqIFJlbGF0ZWQgZmlsZXM6XHJcbiAqIC0gc2VydmljZXMvQXBpS2V5U2VydmljZS5qczogQVBJIGtleSBzdG9yYWdlIGFuZCB2YWxpZGF0aW9uXHJcbiAqIC0gaXBjL2hhbmRsZXJzLmpzOiBIYW5kbGVyIHJlZ2lzdHJhdGlvblxyXG4gKiAtIHByZWxvYWQuanM6IEFQSSBleHBvc3VyZSB0byByZW5kZXJlclxyXG4gKi9cclxuXHJcbmNvbnN0IHsgaXBjTWFpbiB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcclxuY29uc3QgYXBpS2V5U2VydmljZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3NlcnZpY2VzL0FwaUtleVNlcnZpY2UnKTtcclxuY29uc3QgeyBJUENDaGFubmVscyB9ID0gcmVxdWlyZSgnLi4vLi4vdHlwZXMnKTtcclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHdpdGggbGF0ZXN0IEFQSSBrZXlzXHJcbiAqIFRoaXMgZW5zdXJlcyBjb252ZXJ0ZXJzIGhhdmUgYWNjZXNzIHRvIHRoZSBsYXRlc3QgQVBJIGtleXNcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUFwaUtleUVudmlyb25tZW50KHByb3ZpZGVyLCBrZXkpIHtcclxuICB0cnkge1xyXG4gICAgLy8gTWFwIHByb3ZpZGVyIHRvIGVudmlyb25tZW50IHZhcmlhYmxlIG5hbWVcclxuICAgIGNvbnN0IGVudk1hcCA9IHtcclxuICAgICAgJ21pc3RyYWwnOiAnTUlTVFJBTF9BUElfS0VZJyxcclxuICAgICAgJ2RlZXBncmFtJzogJ0RFRVBHUkFNX0FQSV9LRVknXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGVudlZhciA9IGVudk1hcFtwcm92aWRlcl07XHJcbiAgICBpZiAoIWVudlZhcikgcmV0dXJuO1xyXG5cclxuICAgIC8vIFVwZGF0ZSBlbnZpcm9ubWVudCB2YXJpYWJsZVxyXG4gICAgaWYgKGtleSkge1xyXG4gICAgICBwcm9jZXNzLmVudltlbnZWYXJdID0ga2V5O1xyXG4gICAgICBjb25zb2xlLmxvZyhg4pyFIFVwZGF0ZWQgJHtlbnZWYXJ9IGVudmlyb25tZW50IHZhcmlhYmxlYCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkZWxldGUgcHJvY2Vzcy5lbnZbZW52VmFyXTtcclxuICAgICAgY29uc29sZS5sb2coYOKdjCBSZW1vdmVkICR7ZW52VmFyfSBlbnZpcm9ubWVudCB2YXJpYWJsZWApO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciB1cGRhdGluZyBBUEkga2V5IGVudmlyb25tZW50IGZvciAke3Byb3ZpZGVyfTpgLCBlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmVnaXN0ZXIgYWxsIEFQSSBrZXkgcmVsYXRlZCBJUEMgaGFuZGxlcnNcclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQXBpS2V5SGFuZGxlcnMoKSB7XHJcbiAgLy8gU2F2ZSBBUEkga2V5XHJcbiAgaXBjTWFpbi5oYW5kbGUoJ2NvZGV4OmFwaWtleTpzYXZlJywgYXN5bmMgKGV2ZW50LCB7IGtleSwgcHJvdmlkZXIgPSAnbWlzdHJhbCcgfSkgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBpS2V5U2VydmljZS5zYXZlQXBpS2V5KGtleSwgcHJvdmlkZXIpO1xyXG5cclxuICAgIC8vIFVwZGF0ZSBlbnZpcm9ubWVudCB2YXJpYWJsZSB3aXRoIHRoZSBuZXcga2V5XHJcbiAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgdXBkYXRlQXBpS2V5RW52aXJvbm1lbnQocHJvdmlkZXIsIGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9KTtcclxuXHJcbiAgLy8gQ2hlY2sgaWYgQVBJIGtleSBleGlzdHNcclxuICBpcGNNYWluLmhhbmRsZSgnY29kZXg6YXBpa2V5OmV4aXN0cycsIGFzeW5jIChldmVudCwgeyBwcm92aWRlciA9ICdtaXN0cmFsJyB9KSA9PiB7XHJcbiAgICByZXR1cm4geyBleGlzdHM6IGFwaUtleVNlcnZpY2UuaGFzQXBpS2V5KHByb3ZpZGVyKSB9O1xyXG4gIH0pO1xyXG5cclxuICAvLyBEZWxldGUgQVBJIGtleVxyXG4gIGlwY01haW4uaGFuZGxlKCdjb2RleDphcGlrZXk6ZGVsZXRlJywgYXN5bmMgKGV2ZW50LCB7IHByb3ZpZGVyID0gJ21pc3RyYWwnIH0pID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGFwaUtleVNlcnZpY2UuZGVsZXRlQXBpS2V5KHByb3ZpZGVyKTtcclxuXHJcbiAgICAvLyBSZW1vdmUgZW52aXJvbm1lbnQgdmFyaWFibGUgd2hlbiBrZXkgaXMgZGVsZXRlZFxyXG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgIHVwZGF0ZUFwaUtleUVudmlyb25tZW50KHByb3ZpZGVyLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH0pO1xyXG5cclxuICAvLyBWYWxpZGF0ZSBBUEkga2V5XHJcbiAgaXBjTWFpbi5oYW5kbGUoJ2NvZGV4OmFwaWtleTp2YWxpZGF0ZScsIGFzeW5jIChldmVudCwgeyBrZXksIHByb3ZpZGVyID0gJ21pc3RyYWwnIH0pID0+IHtcclxuICAgIHJldHVybiBhd2FpdCBhcGlLZXlTZXJ2aWNlLnZhbGlkYXRlQXBpS2V5KGtleSwgcHJvdmlkZXIpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBHZXQgQVBJIGtleSBmb3IgaW50ZXJuYWwgdXNlIChvbmx5IGF2YWlsYWJsZSB0byBtYWluIHByb2Nlc3MpXHJcbiAgaXBjTWFpbi5oYW5kbGUoJ2NvZGV4OmFwaWtleTpnZXQtZm9yLXNlcnZpY2UnLCBhc3luYyAoZXZlbnQsIHsgcHJvdmlkZXIgPSAnbWlzdHJhbCcgfSkgPT4ge1xyXG4gICAgLy8gU2VjdXJpdHkgY2hlY2s6IG9ubHkgYWxsb3cgbWFpbiBwcm9jZXNzIHRvIGFjY2VzcyB0aGlzXHJcbiAgICBjb25zdCB3ZWJDb250ZW50cyA9IGV2ZW50LnNlbmRlcjtcclxuICAgIGlmICh3ZWJDb250ZW50cy5nZXRUeXBlKCkgIT09ICdicm93c2VyV2luZG93Jykge1xyXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdVbmF1dGhvcml6ZWQgYWNjZXNzJyB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGtleSA9IGFwaUtleVNlcnZpY2UuZ2V0QXBpS2V5KHByb3ZpZGVyKTtcclxuICAgIHJldHVybiB7IHN1Y2Nlc3M6ICEha2V5LCBrZXkgfTtcclxuICB9KTtcclxuXHJcbiAgY29uc29sZS5sb2coJ0FQSSBLZXkgSVBDIGhhbmRsZXJzIHJlZ2lzdGVyZWQnKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENsZWFuIHVwIGFueSByZXNvdXJjZXMgd2hlbiB0aGUgYXBwIGlzIHNodXR0aW5nIGRvd25cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNsZWFudXBBcGlLZXlIYW5kbGVycygpIHtcclxuICAvLyBObyBjbGVhbnVwIG5lZWRlZCBmb3IgQVBJIGtleSBoYW5kbGVyc1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICByZWdpc3RlckFwaUtleUhhbmRsZXJzLFxyXG4gIGNsZWFudXBBcGlLZXlIYW5kbGVyc1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU07RUFBRUE7QUFBUSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDdkMsTUFBTUMsYUFBYSxHQUFHRCxPQUFPLENBQUMsaUNBQWlDLENBQUM7QUFDaEUsTUFBTTtFQUFFRTtBQUFZLENBQUMsR0FBR0YsT0FBTyxDQUFDLGFBQWEsQ0FBQzs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyx1QkFBdUJBLENBQUNDLFFBQVEsRUFBRUMsR0FBRyxFQUFFO0VBQzlDLElBQUk7SUFDRjtJQUNBLE1BQU1DLE1BQU0sR0FBRztNQUNiLFNBQVMsRUFBRSxpQkFBaUI7TUFDNUIsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUVELE1BQU1DLE1BQU0sR0FBR0QsTUFBTSxDQUFDRixRQUFRLENBQUM7SUFDL0IsSUFBSSxDQUFDRyxNQUFNLEVBQUU7O0lBRWI7SUFDQSxJQUFJRixHQUFHLEVBQUU7TUFDUEcsT0FBTyxDQUFDQyxHQUFHLENBQUNGLE1BQU0sQ0FBQyxHQUFHRixHQUFHO01BQ3pCSyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxhQUFhSixNQUFNLHVCQUF1QixDQUFDO0lBQ3pELENBQUMsTUFBTTtNQUNMLE9BQU9DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixNQUFNLENBQUM7TUFDMUJHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWFKLE1B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