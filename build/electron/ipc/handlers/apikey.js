"use strict";

/**
 * API Key IPC Handlers
 * Implements handlers for API key management operations.
 * 
 * Related files:
 * - services/ApiKeyService.js: Core API key management functionality
 * - preload.js: API exposure to renderer
 */

const {
  ipcMain
} = require('electron');
const apiKeyService = require('../../services/ApiKeyService');

/**
 * Register all API key related IPC handlers
 */
function registerApiKeyHandlers() {
  // Save API key
  ipcMain.handle('codex:apikey:save', async (event, {
    key,
    provider = 'mistral'
  }) => {
    return await apiKeyService.saveApiKey(key, provider);
  });

  // Check if API key exists
  ipcMain.handle('codex:apikey:exists', async (event, {
    provider = 'mistral'
  }) => {
    return {
      exists: apiKeyService.hasApiKey(provider)
    };
  });

  // Delete API key
  ipcMain.handle('codex:apikey:delete', async (event, {
    provider = 'mistral'
  }) => {
    return await apiKeyService.deleteApiKey(provider);
  });

  // Validate API key
  ipcMain.handle('codex:apikey:validate', async (event, {
    key,
    provider = 'mistral'
  }) => {
    return await apiKeyService.validateApiKey(key, provider);
  });

  // Get API key
  ipcMain.handle('codex:apikey:get', async (event, {
    provider = 'mistral'
  }) => {
    const key = apiKeyService.getApiKey(provider);
    if (!key) {
      return {
        success: false,
        error: 'API key not found'
      };
    }
    return {
      success: true,
      key
    };
  });
}

/**
 * Clean up API key handlers and resources
 */
async function cleanupApiKeyHandlers() {
  // Remove all handlers
  ipcMain.removeHandler('codex:apikey:save');
  ipcMain.removeHandler('codex:apikey:exists');
  ipcMain.removeHandler('codex:apikey:delete');
  ipcMain.removeHandler('codex:apikey:validate');
  ipcMain.removeHandler('codex:apikey:get');
}
module.exports = {
  registerApiKeyHandlers,
  cleanupApiKeyHandlers
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpcGNNYWluIiwicmVxdWlyZSIsImFwaUtleVNlcnZpY2UiLCJyZWdpc3RlckFwaUtleUhhbmRsZXJzIiwiaGFuZGxlIiwiZXZlbnQiLCJrZXkiLCJwcm92aWRlciIsInNhdmVBcGlLZXkiLCJleGlzdHMiLCJoYXNBcGlLZXkiLCJkZWxldGVBcGlLZXkiLCJ2YWxpZGF0ZUFwaUtleSIsImdldEFwaUtleSIsInN1Y2Nlc3MiLCJlcnJvciIsImNsZWFudXBBcGlLZXlIYW5kbGVycyIsInJlbW92ZUhhbmRsZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2VsZWN0cm9uL2lwYy9oYW5kbGVycy9hcGlrZXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEFQSSBLZXkgSVBDIEhhbmRsZXJzXHJcbiAqIEltcGxlbWVudHMgaGFuZGxlcnMgZm9yIEFQSSBrZXkgbWFuYWdlbWVudCBvcGVyYXRpb25zLlxyXG4gKiBcclxuICogUmVsYXRlZCBmaWxlczpcclxuICogLSBzZXJ2aWNlcy9BcGlLZXlTZXJ2aWNlLmpzOiBDb3JlIEFQSSBrZXkgbWFuYWdlbWVudCBmdW5jdGlvbmFsaXR5XHJcbiAqIC0gcHJlbG9hZC5qczogQVBJIGV4cG9zdXJlIHRvIHJlbmRlcmVyXHJcbiAqL1xyXG5cclxuY29uc3QgeyBpcGNNYWluIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xyXG5jb25zdCBhcGlLZXlTZXJ2aWNlID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvQXBpS2V5U2VydmljZScpOyBcclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlciBhbGwgQVBJIGtleSByZWxhdGVkIElQQyBoYW5kbGVyc1xyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJBcGlLZXlIYW5kbGVycygpIHtcclxuICAvLyBTYXZlIEFQSSBrZXlcclxuICBpcGNNYWluLmhhbmRsZSgnY29kZXg6YXBpa2V5OnNhdmUnLCBhc3luYyAoZXZlbnQsIHsga2V5LCBwcm92aWRlciA9ICdtaXN0cmFsJyB9KSA9PiB7XHJcbiAgICByZXR1cm4gYXdhaXQgYXBpS2V5U2VydmljZS5zYXZlQXBpS2V5KGtleSwgcHJvdmlkZXIpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBDaGVjayBpZiBBUEkga2V5IGV4aXN0c1xyXG4gIGlwY01haW4uaGFuZGxlKCdjb2RleDphcGlrZXk6ZXhpc3RzJywgYXN5bmMgKGV2ZW50LCB7IHByb3ZpZGVyID0gJ21pc3RyYWwnIH0pID0+IHtcclxuICAgIHJldHVybiB7IGV4aXN0czogYXBpS2V5U2VydmljZS5oYXNBcGlLZXkocHJvdmlkZXIpIH07XHJcbiAgfSk7XHJcblxyXG4gIC8vIERlbGV0ZSBBUEkga2V5XHJcbiAgaXBjTWFpbi5oYW5kbGUoJ2NvZGV4OmFwaWtleTpkZWxldGUnLCBhc3luYyAoZXZlbnQsIHsgcHJvdmlkZXIgPSAnbWlzdHJhbCcgfSkgPT4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IGFwaUtleVNlcnZpY2UuZGVsZXRlQXBpS2V5KHByb3ZpZGVyKTtcclxuICB9KTtcclxuXHJcbiAgLy8gVmFsaWRhdGUgQVBJIGtleVxyXG4gIGlwY01haW4uaGFuZGxlKCdjb2RleDphcGlrZXk6dmFsaWRhdGUnLCBhc3luYyAoZXZlbnQsIHsga2V5LCBwcm92aWRlciA9ICdtaXN0cmFsJyB9KSA9PiB7XHJcbiAgICByZXR1cm4gYXdhaXQgYXBpS2V5U2VydmljZS52YWxpZGF0ZUFwaUtleShrZXksIHByb3ZpZGVyKTtcclxuICB9KTtcclxuXHJcbiAgLy8gR2V0IEFQSSBrZXlcclxuICBpcGNNYWluLmhhbmRsZSgnY29kZXg6YXBpa2V5OmdldCcsIGFzeW5jIChldmVudCwgeyBwcm92aWRlciA9ICdtaXN0cmFsJyB9KSA9PiB7XHJcbiAgICBjb25zdCBrZXkgPSBhcGlLZXlTZXJ2aWNlLmdldEFwaUtleShwcm92aWRlcik7XHJcbiAgICBpZiAoIWtleSkge1xyXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdBUEkga2V5IG5vdCBmb3VuZCcgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGtleSB9O1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xlYW4gdXAgQVBJIGtleSBoYW5kbGVycyBhbmQgcmVzb3VyY2VzXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBjbGVhbnVwQXBpS2V5SGFuZGxlcnMoKSB7XHJcbiAgLy8gUmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlwY01haW4ucmVtb3ZlSGFuZGxlcignY29kZXg6YXBpa2V5OnNhdmUnKTtcclxuICBpcGNNYWluLnJlbW92ZUhhbmRsZXIoJ2NvZGV4OmFwaWtleTpleGlzdHMnKTtcclxuICBpcGNNYWluLnJlbW92ZUhhbmRsZXIoJ2NvZGV4OmFwaWtleTpkZWxldGUnKTtcclxuICBpcGNNYWluLnJlbW92ZUhhbmRsZXIoJ2NvZGV4OmFwaWtleTp2YWxpZGF0ZScpO1xyXG4gIGlwY01haW4ucmVtb3ZlSGFuZGxlcignY29kZXg6YXBpa2V5OmdldCcpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICByZWdpc3RlckFwaUtleUhhbmRsZXJzLFxyXG4gIGNsZWFudXBBcGlLZXlIYW5kbGVyc1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0VBQUVBO0FBQVEsQ0FBQyxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3ZDLE1BQU1DLGFBQWEsR0FBR0QsT0FBTyxDQUFDLDhCQUE4QixDQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxzQkFBc0JBLENBQUEsRUFBRztFQUNoQztFQUNBSCxPQUFPLENBQUNJLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxPQUFPQyxLQUFLLEVBQUU7SUFBRUMsR0FBRztJQUFFQyxRQUFRLEdBQUc7RUFBVSxDQUFDLEtBQUs7SUFDbEYsT0FBTyxNQUFNTCxhQUFhLENBQUNNLFVBQVUsQ0FBQ0YsR0FBRyxFQUFFQyxRQUFRLENBQUM7RUFDdEQsQ0FBQyxDQUFDOztFQUVGO0VBQ0FQLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDLHFCQUFxQixFQUFFLE9BQU9DLEtBQUssRUFBRTtJQUFFRSxRQUFRLEdBQUc7RUFBVSxDQUFDLEtBQUs7SUFDL0UsT0FBTztNQUFFRSxNQUFNLEVBQUVQLGFBQWEsQ0FBQ1EsU0FBUyxDQUFDSCxRQUFRO0lBQUUsQ0FBQztFQUN0RCxDQUFDLENBQUM7O0VBRUY7RUFDQVAsT0FBTyxDQUFDSSxNQUFNLENBQUMscUJBQXFCLEVBQUUsT0FBT0MsS0FBSyxFQUFFO0lBQUVFLFFBQVEsR0FBRztFQUFVLENBQUMsS0FBSztJQUMvRSxPQUFPLE1BQU1MLGFBQWEsQ0FBQ1MsWUFBWSxDQUFDSixRQUFRLENBQUM7RUFDbkQsQ0FBQyxDQUFDOztFQUVGO0VBQ0FQLE9BQU8sQ0FBQ0ksTUFBTSxDQUFDLHVCQUF1QixFQUFFLE9BQU9DLEtBQUssRUFBRTtJQUFFQyxHQUFHO0lBQUVDLFFBQVEsR0FBRztFQUFVLENBQUMsS0FBSztJQUN0RixPQUFPLE1BQU1MLGFBQWEsQ0FBQ1UsY0FBYyxDQUFDTixHQUFHLEVBQUVDLFFBQVEsQ0FBQztFQUMxRCxDQUFDLENBQUM7O0VBRUY7RUFDQVAsT0FBTyxDQUFDSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsT0FBT0MsS0FBSyxFQUFFO0lBQUVFLFFBQVEsR0FBRztFQUFVLENBQUMsS0FBSztJQUM1RSxNQUFNRCxHQUFHLEdBQUdKLGFBQWEsQ0FBQ1csU0FBUyxDQUFDTixRQUFRLENBQUM7SUFDN0MsSUFBSSxDQUFDRCxHQUFHLEVBQUU7TUFDUixPQUFPO1FBQUVRLE9BQU8sRUFBRSxLQUFLO1FBQUVDLEtBQUssRUFBRTtNQUFvQixDQUFDO0lBQ3ZEO0lBQ0EsT0FBTztNQUFFRCxPQUFPLEVBQUUsSUFBSTtNQUFFUjtJQUFJLENBQUM7RUFDL0IsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZVUscUJBQXFCQSxDQUFBLEVBQUc7RUFDckM7RUFDQWhCLE9BQU8sQ0FBQ2lCLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztFQUMxQ2pCLE9BQU8sQ0FBQ2lCLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQztFQUM1Q2pCLE9BQU8sQ0FBQ2lCLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQztFQUM1Q2pCLE9BQU8sQ0FBQ2lCLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQztFQUM5Q2pCLE9BQU8sQ0FBQ2lCLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztBQUMzQztBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmaEIsc0JBQXNCO0VBQ3RCYTtBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=