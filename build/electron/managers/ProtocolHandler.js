"use strict";

/**
 * ProtocolHandler.js
 * 
 * Manages custom protocol handling for the application.
 * Registers and handles custom URL protocols like codex-md://
 * for deep linking and file operations.
 */

const {
  app,
  protocol
} = require('electron');
const path = require('path');
const url = require('url');
const fs = require('fs-extra');
const logger = require('../utils/logger');
class ProtocolHandler {
  constructor(windowManager) {
    this.windowManager = windowManager;
    this.protocolName = 'codex-md';
    this.isRegistered = false;

    // Bind methods
    this.handleUrl = this.handleUrl.bind(this);
  }

  /**
   * Initialize the protocol handler
   * @returns {Promise<boolean>} Whether initialization was successful
   */
  async initialize() {
    try {
      // Set the app as the default handler for our custom protocol
      if (process.defaultApp) {
        // Development - specify path to app
        if (process.argv.length >= 2) {
          app.setAsDefaultProtocolClient(this.protocolName, process.execPath, [path.resolve(process.argv[1])]);
        }
      } else {
        // Production - normal registration
        app.setAsDefaultProtocolClient(this.protocolName);
      }
      console.log(`✅ Set as default handler for ${this.protocolName}:// protocol`);

      // Handle open-url events (macOS)
      app.on('open-url', (event, url) => {
        event.preventDefault();
        this.handleUrl(url);
      });

      // Handle second-instance events (Windows)
      app.on('second-instance', (event, commandLine, workingDirectory) => {
        // Find URL in command line arguments
        const urlArg = commandLine.find(arg => arg.startsWith(`${this.protocolName}://`));
        if (urlArg) {
          this.handleUrl(urlArg);
        }

        // Focus the main window
        const mainWindow = this.windowManager.getMainWindow();
        if (mainWindow) {
          if (mainWindow.isMinimized()) {
            mainWindow.restore();
          }
          mainWindow.focus();
        }
      });
      return true;
    } catch (error) {
      console.error(`❌ Failed to initialize protocol handler: ${error.message}`);
      return false;
    }
  }

  /**
   * Register custom file protocol handlers
   * @returns {Promise<boolean>} Whether registration was successful
   */
  async registerProtocols() {
    try {
      if (this.isRegistered) {
        console.log('Protocols already registered');
        return true;
      }

      // Register protocol handler for serving local files
      protocol.registerFileProtocol('local-file', (request, callback) => {
        const filePath = request.url.replace('local-file://', '');
        callback({
          path: filePath
        });
      });
      console.log('✅ Registered local-file:// protocol');
      this.isRegistered = true;
      return true;
    } catch (error) {
      console.error(`❌ Failed to register protocols: ${error.message}`);
      return false;
    }
  }

  /**
   * Handle a custom protocol URL
   * @param {string} urlString - URL to handle
   */
  async handleUrl(urlString) {
    try {
      console.log(`Handling URL: ${urlString}`);

      // Ensure the main window exists
      const mainWindow = await this.windowManager.ensureMainWindow();
      if (!mainWindow) {
        console.error('❌ Cannot handle URL without main window');
        return;
      }

      // Parse the URL
      const urlObj = new URL(urlString);
      const protocol = urlObj.protocol;
      const hostname = urlObj.hostname;
      const pathname = urlObj.pathname;
      const searchParams = urlObj.searchParams;

      // Handle different URL types
      if (protocol === `${this.protocolName}:`) {
        // Handle based on hostname/path
        switch (hostname) {
          case 'open':
            // Handle file opening
            const filePath = decodeURIComponent(pathname);
            console.log(`Opening file: ${filePath}`);
            mainWindow.webContents.send('protocol:open-file', {
              filePath
            });
            break;
          case 'convert':
            // Handle conversion request
            const fileToConvert = decodeURIComponent(pathname);
            const format = searchParams.get('format') || 'markdown';
            console.log(`Converting file: ${fileToConvert} to ${format}`);
            mainWindow.webContents.send('protocol:convert-file', {
              filePath: fileToConvert,
              format
            });
            break;
          default:
            // Handle unknown commands by passing to renderer
            console.log(`Unknown protocol command: ${hostname}`);
            mainWindow.webContents.send('protocol:unknown', {
              url: urlString
            });
            break;
        }
      }
    } catch (error) {
      console.error(`❌ Error handling URL: ${error.message}`);
      if (logger.isInitialized) {
        await logger.error('Protocol URL handling error', {
          url: urlString,
          error: error.message,
          stack: error.stack
        });
      }
    }
  }
}
module.exports = ProtocolHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcHAiLCJwcm90b2NvbCIsInJlcXVpcmUiLCJwYXRoIiwidXJsIiwiZnMiLCJsb2dnZXIiLCJQcm90b2NvbEhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsIndpbmRvd01hbmFnZXIiLCJwcm90b2NvbE5hbWUiLCJpc1JlZ2lzdGVyZWQiLCJoYW5kbGVVcmwiLCJiaW5kIiwiaW5pdGlhbGl6ZSIsInByb2Nlc3MiLCJkZWZhdWx0QXBwIiwiYXJndiIsImxlbmd0aCIsInNldEFzRGVmYXVsdFByb3RvY29sQ2xpZW50IiwiZXhlY1BhdGgiLCJyZXNvbHZlIiwiY29uc29sZSIsImxvZyIsIm9uIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImNvbW1hbmRMaW5lIiwid29ya2luZ0RpcmVjdG9yeSIsInVybEFyZyIsImZpbmQiLCJhcmciLCJzdGFydHNXaXRoIiwibWFpbldpbmRvdyIsImdldE1haW5XaW5kb3ciLCJpc01pbmltaXplZCIsInJlc3RvcmUiLCJmb2N1cyIsImVycm9yIiwibWVzc2FnZSIsInJlZ2lzdGVyUHJvdG9jb2xzIiwicmVnaXN0ZXJGaWxlUHJvdG9jb2wiLCJyZXF1ZXN0IiwiY2FsbGJhY2siLCJmaWxlUGF0aCIsInJlcGxhY2UiLCJ1cmxTdHJpbmciLCJlbnN1cmVNYWluV2luZG93IiwidXJsT2JqIiwiVVJMIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInNlYXJjaFBhcmFtcyIsImRlY29kZVVSSUNvbXBvbmVudCIsIndlYkNvbnRlbnRzIiwic2VuZCIsImZpbGVUb0NvbnZlcnQiLCJmb3JtYXQiLCJnZXQiLCJpc0luaXRpYWxpemVkIiwic3RhY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VsZWN0cm9uL21hbmFnZXJzL1Byb3RvY29sSGFuZGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUHJvdG9jb2xIYW5kbGVyLmpzXHJcbiAqIFxyXG4gKiBNYW5hZ2VzIGN1c3RvbSBwcm90b2NvbCBoYW5kbGluZyBmb3IgdGhlIGFwcGxpY2F0aW9uLlxyXG4gKiBSZWdpc3RlcnMgYW5kIGhhbmRsZXMgY3VzdG9tIFVSTCBwcm90b2NvbHMgbGlrZSBjb2RleC1tZDovL1xyXG4gKiBmb3IgZGVlcCBsaW5raW5nIGFuZCBmaWxlIG9wZXJhdGlvbnMuXHJcbiAqL1xyXG5cclxuY29uc3QgeyBhcHAsIHByb3RvY29sIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5jb25zdCB1cmwgPSByZXF1aXJlKCd1cmwnKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xyXG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy9sb2dnZXInKTtcclxuXHJcbmNsYXNzIFByb3RvY29sSGFuZGxlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aW5kb3dNYW5hZ2VyKSB7XHJcbiAgICAgICAgdGhpcy53aW5kb3dNYW5hZ2VyID0gd2luZG93TWFuYWdlcjtcclxuICAgICAgICB0aGlzLnByb3RvY29sTmFtZSA9ICdjb2RleC1tZCc7XHJcbiAgICAgICAgdGhpcy5pc1JlZ2lzdGVyZWQgPSBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBCaW5kIG1ldGhvZHNcclxuICAgICAgICB0aGlzLmhhbmRsZVVybCA9IHRoaXMuaGFuZGxlVXJsLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgcHJvdG9jb2wgaGFuZGxlclxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFdoZXRoZXIgaW5pdGlhbGl6YXRpb24gd2FzIHN1Y2Nlc3NmdWxcclxuICAgICAqL1xyXG4gICAgYXN5bmMgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBTZXQgdGhlIGFwcCBhcyB0aGUgZGVmYXVsdCBoYW5kbGVyIGZvciBvdXIgY3VzdG9tIHByb3RvY29sXHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmRlZmF1bHRBcHApIHtcclxuICAgICAgICAgICAgICAgIC8vIERldmVsb3BtZW50IC0gc3BlY2lmeSBwYXRoIHRvIGFwcFxyXG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuYXJndi5sZW5ndGggPj0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5zZXRBc0RlZmF1bHRQcm90b2NvbENsaWVudCh0aGlzLnByb3RvY29sTmFtZSwgcHJvY2Vzcy5leGVjUGF0aCwgW3BhdGgucmVzb2x2ZShwcm9jZXNzLmFyZ3ZbMV0pXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBQcm9kdWN0aW9uIC0gbm9ybWFsIHJlZ2lzdHJhdGlvblxyXG4gICAgICAgICAgICAgICAgYXBwLnNldEFzRGVmYXVsdFByb3RvY29sQ2xpZW50KHRoaXMucHJvdG9jb2xOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYOKchSBTZXQgYXMgZGVmYXVsdCBoYW5kbGVyIGZvciAke3RoaXMucHJvdG9jb2xOYW1lfTovLyBwcm90b2NvbGApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gSGFuZGxlIG9wZW4tdXJsIGV2ZW50cyAobWFjT1MpXHJcbiAgICAgICAgICAgIGFwcC5vbignb3Blbi11cmwnLCAoZXZlbnQsIHVybCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVXJsKHVybCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gSGFuZGxlIHNlY29uZC1pbnN0YW5jZSBldmVudHMgKFdpbmRvd3MpXHJcbiAgICAgICAgICAgIGFwcC5vbignc2Vjb25kLWluc3RhbmNlJywgKGV2ZW50LCBjb21tYW5kTGluZSwgd29ya2luZ0RpcmVjdG9yeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gRmluZCBVUkwgaW4gY29tbWFuZCBsaW5lIGFyZ3VtZW50c1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsQXJnID0gY29tbWFuZExpbmUuZmluZChhcmcgPT4gYXJnLnN0YXJ0c1dpdGgoYCR7dGhpcy5wcm90b2NvbE5hbWV9Oi8vYCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVybEFyZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVXJsKHVybEFyZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIEZvY3VzIHRoZSBtYWluIHdpbmRvd1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWFpbldpbmRvdyA9IHRoaXMud2luZG93TWFuYWdlci5nZXRNYWluV2luZG93KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWFpbldpbmRvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYWluV2luZG93LmlzTWluaW1pemVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbldpbmRvdy5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1haW5XaW5kb3cuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGDinYwgRmFpbGVkIHRvIGluaXRpYWxpemUgcHJvdG9jb2wgaGFuZGxlcjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGN1c3RvbSBmaWxlIHByb3RvY29sIGhhbmRsZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gV2hldGhlciByZWdpc3RyYXRpb24gd2FzIHN1Y2Nlc3NmdWxcclxuICAgICAqL1xyXG4gICAgYXN5bmMgcmVnaXN0ZXJQcm90b2NvbHMoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWdpc3RlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUHJvdG9jb2xzIGFscmVhZHkgcmVnaXN0ZXJlZCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFJlZ2lzdGVyIHByb3RvY29sIGhhbmRsZXIgZm9yIHNlcnZpbmcgbG9jYWwgZmlsZXNcclxuICAgICAgICAgICAgcHJvdG9jb2wucmVnaXN0ZXJGaWxlUHJvdG9jb2woJ2xvY2FsLWZpbGUnLCAocmVxdWVzdCwgY2FsbGJhY2spID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcmVxdWVzdC51cmwucmVwbGFjZSgnbG9jYWwtZmlsZTovLycsICcnKTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHsgcGF0aDogZmlsZVBhdGggfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ+KchSBSZWdpc3RlcmVkIGxvY2FsLWZpbGU6Ly8gcHJvdG9jb2wnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuaXNSZWdpc3RlcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEZhaWxlZCB0byByZWdpc3RlciBwcm90b2NvbHM6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgYSBjdXN0b20gcHJvdG9jb2wgVVJMXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsU3RyaW5nIC0gVVJMIHRvIGhhbmRsZVxyXG4gICAgICovXHJcbiAgICBhc3luYyBoYW5kbGVVcmwodXJsU3RyaW5nKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYEhhbmRsaW5nIFVSTDogJHt1cmxTdHJpbmd9YCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhlIG1haW4gd2luZG93IGV4aXN0c1xyXG4gICAgICAgICAgICBjb25zdCBtYWluV2luZG93ID0gYXdhaXQgdGhpcy53aW5kb3dNYW5hZ2VyLmVuc3VyZU1haW5XaW5kb3coKTtcclxuICAgICAgICAgICAgaWYgKCFtYWluV2luZG93KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgQ2Fubm90IGhhbmRsZSBVUkwgd2l0aG91dCBtYWluIHdpbmRvdycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBQYXJzZSB0aGUgVVJMXHJcbiAgICAgICAgICAgIGNvbnN0IHVybE9iaiA9IG5ldyBVUkwodXJsU3RyaW5nKTtcclxuICAgICAgICAgICAgY29uc3QgcHJvdG9jb2wgPSB1cmxPYmoucHJvdG9jb2w7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvc3RuYW1lID0gdXJsT2JqLmhvc3RuYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBwYXRobmFtZSA9IHVybE9iai5wYXRobmFtZTtcclxuICAgICAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gdXJsT2JqLnNlYXJjaFBhcmFtcztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBkaWZmZXJlbnQgVVJMIHR5cGVzXHJcbiAgICAgICAgICAgIGlmIChwcm90b2NvbCA9PT0gYCR7dGhpcy5wcm90b2NvbE5hbWV9OmApIHtcclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBiYXNlZCBvbiBob3N0bmFtZS9wYXRoXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGhvc3RuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnb3Blbic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBmaWxlIG9wZW5pbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBkZWNvZGVVUklDb21wb25lbnQocGF0aG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgT3BlbmluZyBmaWxlOiAke2ZpbGVQYXRofWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluV2luZG93LndlYkNvbnRlbnRzLnNlbmQoJ3Byb3RvY29sOm9wZW4tZmlsZScsIHsgZmlsZVBhdGggfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnZlcnQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgY29udmVyc2lvbiByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVUb0NvbnZlcnQgPSBkZWNvZGVVUklDb21wb25lbnQocGF0aG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdmb3JtYXQnKSB8fCAnbWFya2Rvd24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQ29udmVydGluZyBmaWxlOiAke2ZpbGVUb0NvbnZlcnR9IHRvICR7Zm9ybWF0fWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluV2luZG93LndlYkNvbnRlbnRzLnNlbmQoJ3Byb3RvY29sOmNvbnZlcnQtZmlsZScsIHsgZmlsZVBhdGg6IGZpbGVUb0NvbnZlcnQsIGZvcm1hdCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIHVua25vd24gY29tbWFuZHMgYnkgcGFzc2luZyB0byByZW5kZXJlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVW5rbm93biBwcm90b2NvbCBjb21tYW5kOiAke2hvc3RuYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluV2luZG93LndlYkNvbnRlbnRzLnNlbmQoJ3Byb3RvY29sOnVua25vd24nLCB7IHVybDogdXJsU3RyaW5nIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBFcnJvciBoYW5kbGluZyBVUkw6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgaWYgKGxvZ2dlci5pc0luaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2dnZXIuZXJyb3IoJ1Byb3RvY29sIFVSTCBoYW5kbGluZyBlcnJvcicsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2tcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFByb3RvY29sSGFuZGxlcjsiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTTtFQUFFQSxHQUFHO0VBQUVDO0FBQVMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzdDLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUM1QixNQUFNRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDMUIsTUFBTUcsRUFBRSxHQUFHSCxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzlCLE1BQU1JLE1BQU0sR0FBR0osT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBRXpDLE1BQU1LLGVBQWUsQ0FBQztFQUNsQkMsV0FBV0EsQ0FBQ0MsYUFBYSxFQUFFO0lBQ3ZCLElBQUksQ0FBQ0EsYUFBYSxHQUFHQSxhQUFhO0lBQ2xDLElBQUksQ0FBQ0MsWUFBWSxHQUFHLFVBQVU7SUFDOUIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsS0FBSzs7SUFFekI7SUFDQSxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztFQUM5Qzs7RUFFQTtBQUNKO0FBQ0E7QUFDQTtFQUNJLE1BQU1DLFVBQVVBLENBQUEsRUFBRztJQUNmLElBQUk7TUFDQTtNQUNBLElBQUlDLE9BQU8sQ0FBQ0MsVUFBVSxFQUFFO1FBQ3BCO1FBQ0EsSUFBSUQsT0FBTyxDQUFDRSxJQUFJLENBQUNDLE1BQU0sSUFBSSxDQUFDLEVBQUU7VUFDMUJsQixHQUFHLENBQUNtQiwwQkFBMEIsQ0FBQyxJQUFJ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